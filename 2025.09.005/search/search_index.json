{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation for the ACCESS-OM3 ocean-seaice model configurations! </p> <p>ACCESS-OM3 is the third generation of the ACCESS global ocean - sea ice model. It uses up-to-date releases of the MOM6 ocean model and CICE6 sea ice model. It is the first ACCESS model that couples model components using CMEPS (Community Mediator for Earth Prediction Systems), built on top of NUOPC (National Unified Operational Prediction Capability) infrastructure.</p>"},{"location":"#access-om3-quickstart","title":"ACCESS-OM3 Quickstart","text":"<p>If you would like to simply run the model, see the How to Run ACCESS OM3 documentation. </p>  [![Hive](assets/ACCESS_icon_HIVE.png){: class=\"icon-before-text\"} Run ACCESS-OM3](https://docs.access-hive.org.au/models/run-a-model/run-access-om3/){: class=\"text-card\" target=\"_blank\" rel=\"noopener\"}"},{"location":"#access-om3-documentation-overview","title":"ACCESS-OM3 Documentation Overview","text":"<p>See the navigation links on the left. Some reading tips, see:</p> <ul> <li>Contributing if you'd like to get involved / provide feedback on ACCESS-OM3;</li> <li>Inputs if you would like to understand how the input files are generated;</li> <li>Configuration choices/Configurations for information/background about specific configurations. The remaining sub-sections in <code>Configuration choices</code> provide background on key files and background on how ACCESS-OM3 configurations work/can be customised. These parts are likely of most interest to users.</li> <li>Infrastructure is likely of more interest to ACCESS-NRI staff and developers. Having said this, some users, might find pages such as <code>Architecture</code> useful background.</li> </ul>"},{"location":"#access-om3-configs-overview","title":"ACCESS-OM3-Configs Overview","text":"<p>ACCESS-OM3 configurations are provided via branches in the access-om3-configs GitHub repository. The access-om3-configs repository contains several configurations using the following components:</p> <ul> <li>MOM6 ocean model</li> <li>CICE sea ice model</li> <li>WW3 wave model</li> <li>DATM atmosphere data model</li> <li>DROF runoff data model</li> </ul> <p>All the configurations use the Payu workflow management tool, and pre-built executables available on NCI.</p>"},{"location":"#repository-structure","title":"Repository structure","text":"<p>The <code>main</code> branch does not store any model configurations, only documentation.</p> <p>Each configuration in github.com/ACCESS-NRI/access-om3-configs repository is stored as a git branch. Most of the branches are named according to the following naming scheme:</p> <p><code>{dev|release}-{MODEL_COMPONENTS}_{nominal_resolution}km_{forcing_data}_{forcing_method}[+{modifier}]</code></p> <p>where <code>{MODEL_COMPONENTS}</code> is an acronym specifying the active model components in the following order:</p> <ul> <li><code>M</code>: MOM6</li> <li><code>C</code>: CICE6</li> <li><code>W</code>: WW3</li> <li><code>r</code> : a regional configuration</li> </ul> <p>and the nominal resolution is given in kilometers, corresponding to the nominal resolution in degrees as follows:</p> <ul> <li><code>100km</code>: 1\u00b0</li> <li><code>25km</code>: 0.25\u00b0</li> <li><code>10km</code>: 0.1\u00b0</li> <li><code>8km</code>: 1/12\u00b0</li> </ul> <p>For regional configurations, a short word describing the location of the domain is included after the nominal resolution. For example:</p> <ul> <li><code>tas5km</code>:    5km resolution around Tasmainia</li> <li><code>superoz4km</code> 4km resolution around Australia</li> </ul> <p>Additional configuration information, like if the configuration includes biogeochemistry, is appended to the name as a modifier, e.g.</p> <ul> <li><code>+wombatlite</code> if the configuration uses WOMBATlite</li> </ul> <p>Currently the following released configurations are available:</p> <ul> <li><code>release-MC_100km_jra_ryf</code></li> </ul> <p>Currently the following development configurations are available:</p> <p>MOM6-CICE6-DATM-DROF configurations</p> <ul> <li><code>dev-MC_100km_jra_ryf</code></li> <li><code>dev-MC_100km_jra_iaf</code></li> <li><code>dev-MC_100km_jra_ryf+wombatlite</code></li> <li><code>dev-MC_25km_jra_ryf</code></li> <li><code>dev-MC_25km_jra_ryf+wombatlite</code></li> </ul> <p>MOM6-CICE6-WW3-DATM-DROF configurations</p> <ul> <li><code>dev-MCW_100km_jra_ryf</code></li> <li><code>dev-MCW_100km_jra_iaf</code></li> </ul> <p>!!! warning     These <code>dev_*</code> configurations are still under development and should not be used for production runs.</p>"},{"location":"#comparison-table","title":"Comparison table","text":"<p>The following links can be used to easily compare different configuration branches</p> <p>MC \u2192 MC</p> <ul> <li><code>release-MC_25km_jra_ryf</code>\u2b05\ufe0f<code>dev-MC_25km_jra_iaf</code></li> <li><code>dev-MC_100km_jra_ryf</code>\u2b05\ufe0f<code>dev-MC_100km_jra_iaf</code></li> <li><code>dev-MC_100km_jra_ryf</code>\u2b05\ufe0f<code>dev-MC_100km_jra_ryf+wombatlite</code></li> <li><code>dev-MC_100km_jra_ryf</code>\u2b05\ufe0f<code>dev-MC_25km_jra_ryf</code></li> <li><code>dev-MC_100km_jra_ryf+wombatlite</code>\u2b05\ufe0f<code>dev-MC_25km_jra_ryf+wombatlite</code></li> <li><code>dev-MC_25km_jra_ryf</code>\u2b05\ufe0f<code>dev-MC_25km_jra_ryf+wombatlite</code></li> </ul> <p>MCW \u2192 MCW</p> <ul> <li><code>dev-MCW_100km_jra_ryf</code>\u2b05\ufe0f<code>dev-MCW_100km_jra_iaf</code></li> </ul> <p>MC \u2192 MCW</p> <ul> <li><code>dev-MC_100km_jra_ryf</code>\u2b05\ufe0f<code>dev-MCW_100km_jra_ryf</code></li> <li><code>dev-MC_100km_jra_iaf</code>\u2b05\ufe0f<code>dev-MCW_100km_jra_iaf</code></li> </ul>"},{"location":"Online-resources/","title":"Online Resources","text":""},{"location":"Online-resources/#mom6-info-docs-etc","title":"MOM6 info, docs, etc","text":"<ul> <li>MOM6 homepage</li> <li>MOM6 wiki</li> <li>MOM6 documentation</li> <li>MOM6 tutorial videos (also see here) and an older overview of MOM6 numerics</li> <li>MOM6 discussion forum</li> </ul>"},{"location":"Online-resources/#related-projects","title":"Related projects","text":"<p>We draw on experience from COSIMA's other MOM6 projects, e.g.</p> <ul> <li>our global MOM6 configuration</li> <li>our MOM6 regional configuration generator</li> <li>our MOM6 PanAntarctic regional configurations</li> <li>our MOM6 EAC regional configuration</li> <li>Claire Yung's ice shelf tools</li> </ul>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/","title":"Running the MOM6\u2013CICE6\u2013WW3 Coupled Model","text":"<p>This guide provides a workflow for running the coupled MOM6\u2013CICE6\u2013WW3 model in ACCESS-OM3 using prebuilt executables and existing configuration input files. It assumes no local builds or compilation.</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#1-load-required-modules","title":"1. Load Required Modules","text":"<p>First, configure your environment by loading the appropriate modules:</p> <pre><code>module use /g/data/vk83/modules\nmodule load payu\n</code></pre>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#2-clone-the-wave-configuration","title":"2. Clone the Wave Configuration","text":"<p>Use <code>payu</code> to clone one of the existing wave-coupled ACCESS-OM3 configurations:</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#for-ryf-forcing","title":"For RYF forcing:","text":"<pre><code>payu clone --branch dev-MCW_100km_jra_ryf   git@github.com:ACCESS-NRI/access-om3-configs.git wav_config_ryf\n</code></pre>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#for-iaf-forcing","title":"For IAF forcing:","text":"<pre><code>payu clone --branch dev-MCW_100km_jra_iaf   git@github.com:ACCESS-NRI/access-om3-configs.git wav_config_iaf\n</code></pre> <p>This creates a working directory (<code>wav_config_ryf/</code> or <code>wav_config_iaf/</code>) containing the configuration files.</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#3-optional-regenerate-ww3-input-files","title":"3. (Optional) Regenerate WW3 Input Files","text":"<p>This step is only required if you modify the WW3 pre-processing inputs:</p> <ul> <li><code>WW3_PreProc/ww3_grid.nml</code> \u2014 to change grid or spectral discretization  </li> <li><code>WW3_PreProc/ww3_strt.inp</code> \u2014 to change restart/initialization setup</li> </ul> <p>Important: If you modify <code>WW3_PreProc/namelists_Global.nml</code>, this affects WW3 physics and requires recompiling ACCESS-OM3 with matching WW3 compile-time switches. This cannot be handled by namelists alone.</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#to-regenerate-input-files","title":"To regenerate input files:","text":"<ol> <li>Load the module version matching your <code>config.yaml</code>:</li> </ol> <pre><code>module use /g/data/vk83/modules\nmodule load access-om3/&lt;version&gt;  # Use exact version listed in config.yaml\n</code></pre> <ol> <li>Run preprocessing tools from the config directory:</li> </ol> <pre><code>cd &lt;wave_config_directory&gt;/WW3_PreProc\n\n# Generate mod_def.ww3\nww3_grid\n\n# Generate restart.ww3\nww3_strt\n</code></pre> <p>This creates updated <code>mod_def.ww3</code> and <code>restart.ww3</code> in the <code>WW3_PreProc</code> directory.</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#4-modify-configyaml-if-using-regenerated-ww3-files","title":"4. Modify <code>config.yaml</code> (if using regenerated WW3 files)","text":"<p>If you regenerated WW3 input files, update your <code>config.yaml</code> file:</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#replace-the-default-ww3-input-paths-with-the-regenerated-ones","title":"Replace the default WW3 input paths with the regenerated ones:","text":"<pre><code>input:\n  - &lt;wave_config_directory&gt;/WW3_PreProc/restart.ww3\n  - &lt;wave_config_directory&gt;/WW3_PreProc/mod_def.ww3\n</code></pre> <p>Replace <code>&lt;wave_config_directory&gt;</code> with your actual path.</p> <p>If you haven\u2019t changed anything in <code>WW3_PreProc</code>, you can skip steps 3 and 4 entirely.</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#5-run-the-model","title":"5. Run the Model","text":"<p>From the configuration directory:</p>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#clean-and-initialize","title":"Clean and initialize:","text":"<pre><code>payu sweep\n</code></pre>"},{"location":"configurations/MOM6-CICE6-WW3-quickstart/#start-the-run","title":"Start the run:","text":"<pre><code>payu run\n</code></pre> <p>This will launch the MOM6\u2013CICE6\u2013WW3 coupled model using your configured setup and inputs.</p>"},{"location":"configurations/Overview/","title":"Overview","text":""},{"location":"configurations/Overview/#what-the-configuration-files-are-for","title":"What the configuration files are for","text":"<p>The configurations have much in common. Here we provide a quick overview of the common features, using examples from the <code>dev-MC_100km_jra_ryf</code> branch. This is a MOM6-CICE6 coupled configuration without waves or biogeochemistry, at a nominal 100 km (1\u00b0) horizontal resolution, under repeat-year forcing. </p> <ul> <li><code>config.yaml</code>: used by <code>payu</code> for model setup and run (YAML format)</li> <li><code>datm_in</code>: sets stream-independent data atmosphere parameters (in Fortran namelist format)</li> <li><code>datm.streams.xml</code>: sets input files and other stream-dependent input data for data atmosphere in this XML format</li> <li><code>diag_table</code>: MOM6 diagnostics in this format; may be generated from a <code>diag_table_source.yaml</code> YAML file by <code>make_diag_table.py</code></li> <li><code>drof_in</code>: sets stream-independent data runoff parameters (in Fortran namelist format)</li> <li><code>drof.streams.xml</code>: sets input files and other stream-dependent input data for data runoff in this XML format</li> <li><code>drv_in</code>: NUOPC parameters for the driver (in Fortran namelist format)</li> <li><code>fd.yaml</code>: NUOPC field dictionary (YAML format) read by the NUOPC driver; defines standard metadata for fields that may be available for import and/or export from model components; <code>standard_name</code>s are used for field pairing during initialisation</li> <li><code>ice_in</code>: CICE6 parameters (in Fortran namelist format)</li> <li><code>input.nml</code>: a few MOM6 parameters (in Fortran namelist format)</li> <li><code>MOM_input</code>: most of the MOM6 parameters, in this format</li> <li><code>MOM_override</code>: more MOM6 parameters in this format, overriding things in <code>MOM_input</code></li> <li><code>nuopc.runconfig</code>: read by NUOPC driver; supplies driver-related parameters for model components; parameters documented here; the file is a mix of Resource File and Fortran namelist formats</li> <li><code>nuopc.runseq</code>: read by NUOPC driver; defines model component run sequence using this syntax</li> </ul>"},{"location":"configurations/Overview/#where-to-set-parameters","title":"Where to set parameters","text":""},{"location":"configurations/Overview/#model-executable","title":"Model executable","text":"<ul> <li><code>exe</code> in <code>config.yaml</code>. Pre-built executables are available in <code>/g/data/ik11/inputs/access-om3/bin/</code> or you can build your own. Executable names indicate the available model components and the git hash of the source code used. Avoid using the <code>Debug</code> versions for production runs as they are much slower.</li> </ul>"},{"location":"configurations/Overview/#coupling","title":"Coupling","text":"<ul> <li>active model components</li> <li><code>component_list</code> and entries in <code>ALLCOMP_attributes</code> section in <code>nuopc.runconfig</code>, e.g.</li> </ul> <pre><code>component_list: MED ATM ICE OCN ROF\nALLCOMP_attributes::\n     ATM_model = datm  # data atmosphere\n     GLC_model = sglc  # no glaciers/land ice (stub)\n     ICE_model = cice  # active sea ice (cice)\n     LND_model = slnd  # no land model (stub)\n     MED_model = cesm  # mediator\n     OCN_model = mom   # active ocean model (mom6)\n     ROF_model = drof  # data runoff\n     WAV_model = swav  # no wave model (stub)\n     ...\n</code></pre> <ul> <li>components and fields to couple</li> <li>See the coupling architecture here</li> <li>Coupling is negotiated between model components during initialization of a model run. See here: \"CMEPS advertises all possible fields that can be imported to and exported by the mediator for the target coupled system. Not all of these fields will be connected to the various components. The connections will be determined by what the components advertise in their respective advertise phase.\"</li> <li><code>fd.yaml</code>: NUOPC field dictionary defines standard metadata for fields that may be available for import and/or export from model components; standard_names are used for field pairing during initialisation</li> <li>the fields available to be imported/exported for coupling are determined by the NUOPC cap code for MOM6, CICE6, WW3, DATM and DROF and recorded in the mediator log output file: <code>grep Advert archive/output000/log/med.log</code></li> <li>whether those fields are actually coupled is determined by the CMEPS mediator at run time (see here).<ul> <li>the coupling between components is recorded in the mediator log output file: <code>grep -A 9 \"Active coupling flags\" archive/output000/log/med.log</code></li> <li>the mediator log output file also lists the individual fields that are coupled and where the coupled fluxes are calculated: <code>grep '^ mapping' archive/output000/log/med.log</code>; see here for how to decode this</li> </ul> </li> <li>also see <code>wav_coupling_to_cice</code> in <code>nuopc.runconfig</code></li> <li>remapping/redistribution method for coupled fields</li> <li>The remapping method used for each field is recorded in the mediator log output file: <code>grep '^ mapping' archive/output000/log/med.log</code>; see here for how to decode this</li> <li><code>datm.streams.xml</code> and <code>drof.streams.xml</code> specify <code>&lt;mapalgo&gt;bilinear&lt;/mapalgo&gt;</code> but there are better options - see here and here</li> <li><code>rof2ocn_ice_rmapname</code> and <code>rof2ocn_liq_rmapname</code> in <code>MED_attributes</code> in <code>nuopc.runconfig</code></li> <li><code>*map*</code> in <code>MED_attributes</code> in <code>nuopc.runconfig</code></li> <li><code>remapMethod</code> in <code>nuopc.runseq</code>; options are <code>redist</code>, <code>bilinear</code> (the default), <code>patch</code>, <code>nearest_stod</code>, <code>nearest_dtos</code>, <code>conserve</code>. For strict bit-for-bit reproducibility <code>srcTermProcessing=1</code> and <code>termOrder=srcseq</code> are also required. See details here and here and this detailed explanation.</li> <li>time interpolation of coupled fields</li> <li>specified via <code>tintalgo</code> in <code>datm.streams.xml</code> and <code>drof.streams.xml</code> - see here for options</li> </ul>"},{"location":"configurations/Overview/#processor-layout-see-here","title":"Processor layout - see here","text":"<ul> <li>entries in <code>PELAYOUT_attributes</code> section in <code>nuopc.runconfig</code></li> <li>may need to adjust <code>max_blocks</code> in <code>ice_in</code></li> <li>may need a <code>mem: 192GB</code> entry in <code>config.yaml</code> if you are using less than a full node</li> </ul>"},{"location":"configurations/Overview/#io-layout","title":"IO layout","text":"<ul> <li>entries in <code>*_modelio</code> sections in <code>nuopc.runconfig</code></li> <li>for <code>pio_typename</code>.<ul> <li>Use <code>netcdf4p</code> for parallel IO. Don't use <code>netcdf4c</code> (deprecated) or <code>pnetcdf</code> (not included in dependencies).</li> <li><code>netcdf</code> only uses one PE (<code>pio_root</code>) for IO</li> </ul> </li> <li>MOM6 uses FMS for IO and doesn't use the settings in the <code>OCN_modelio</code> section. Instead, IO settings can be configured in the <code>fms2_io_nml</code> namelist group in <code>input.nml</code></li> </ul>"},{"location":"configurations/Overview/#case-name","title":"case name","text":"<ul> <li><code>case_name</code> in <code>ALLCOMP_attributes</code> in <code>nuopc.runconfig</code></li> </ul>"},{"location":"configurations/Overview/#grids","title":"grids","text":"<ul> <li><code>mesh_atm</code>, <code>mesh_ice</code>, <code>mesh_ocn</code> in <code>ALLCOMP_attributes</code> in <code>nuopc.runconfig</code></li> <li><code>mesh_rof</code> in <code>ROF_attributes</code> in <code>nuopc.runconfig</code></li> <li>grid dimensions <code>*_nx</code>, <code>*_ny</code> in <code>MED_attributes</code> in <code>nuopc.runconfig</code></li> </ul>"},{"location":"configurations/Overview/#coupling-diagnostics","title":"coupling diagnostics","text":"<ul> <li><code>*budget*</code> in <code>MED_attributes</code> in <code>nuopc.runconfig</code></li> <li><code>hist*</code> in <code>MED_attributes</code> in <code>nuopc.runconfig</code><ul> <li><code>histaux_*_flds</code> is either a colon-delimited list of fields to output, or <code>all</code> to output everything; see CMEPS field naming convention to decode these</li> <li><code>grep hist archive/output000/log/med.log</code> will show you when data was written</li> </ul> </li> </ul>"},{"location":"configurations/Overview/#verbosity-in-nuopc-log-files-archiveoutputloglog","title":"verbosity in NUOPC log files (<code>archive/output*/log/*.log</code>)","text":"<ul> <li><code>Verbosity</code> in attributes for model components in <code>nuopc.runconfig</code>; can be <code>off</code>, <code>low</code>, <code>high</code>, <code>max</code> - see here - but doesn't seems to make any difference, perhaps due to this issue.</li> </ul>"},{"location":"configurations/Overview/#calendar","title":"calendar","text":"<ul> <li><code>calendar</code> in <code>CLOCK_attributes</code> in <code>nuopc.runconfig</code>; can be either <code>NO_LEAP</code> or <code>GREGORIAN</code></li> <li>also set <code>use_leap_years = .true.</code> in <code>ice_in</code> for Gregorian calendar</li> </ul>"},{"location":"configurations/Overview/#start-date","title":"start date","text":"<ul> <li><code>start_ymd</code> in <code>CLOCK_attributes</code> in <code>nuopc.runconfig</code></li> </ul>"},{"location":"configurations/Overview/#run-length","title":"run length","text":"<ul> <li><code>stop_n</code> and <code>stop_option</code> in <code>CLOCK_attributes</code> in <code>nuopc.runconfig</code>; available units for <code>stop_option</code> are listed here</li> </ul>"},{"location":"configurations/Overview/#run-sequence","title":"run sequence","text":"<ul> <li>The order which components are run is specified in <code>nuopc.runseq</code>. The order also impacts whether components run sequentially or in parallel. Normally we specify CICE and MOM to run in subsequent lines in <code>nuopc.runseq</code>, and as long as they are on different processors, they run in parallel as these steps do not depend on each other.</li> <li>To run MOM before CICE, specify all OCN related steps in the nuopc.runseq before all ICE related steps (see example here). This will be very slow and resource inefficient and is for testing / debugging only. It does reduce the coupling related lag in stress between the sea-ice and ocean (see Morrison 2024 slides</li> </ul>"},{"location":"configurations/Overview/#restart-frequency","title":"restart frequency","text":"<ul> <li><code>restart_n</code> and <code>restart_option</code> in <code>CLOCK_attributes</code> in <code>nuopc.runconfig</code>; available units for <code>restart_option</code> are listed here</li> </ul>"},{"location":"configurations/Overview/#timesteps","title":"timesteps","text":"<ul> <li>there is a complex set of interrelated timesteps - see here and here to understand how they interact</li> <li>coupling and driver timesteps - see here<ul> <li><code>*_cpl_dt</code> in <code>CLOCK_attributes</code> in <code>nuopc.runconfig</code></li> <li><code>nuopc.runseq</code></li> </ul> </li> <li>MOM6 timestepping - see here<ul> <li>There are 4 timesteps. From shortest to longest they are: barotropic, baroclinic (Lagrangian), tracer, vertical remapping - see here and here and here</li> </ul> </li> <li>CICE6 timestepping - see here<ul> <li>There are 3 timesteps. From shortest to longest they are elastic, dynamic and thermodynamic - see here</li> <li>The thermodynamic timestep is determined by the coupling (and driver) timestep (so <code>dt</code> should not be explicitly set in <code>ice_in</code> - see here)</li> <li><code>ndtd</code> in <code>ice_in</code> sets the number of dynamic timesteps in each thermodynamic timestep; increasing this can resolve \"bad departure points\" CFL errors</li> <li><code>ndte</code> in <code>ice_in</code> sets the number of elastic timesteps in each dynamic timestep if the classic EVP or EAP method is used (<code>kdyn</code> = 1 or 2, <code>revised_evp</code> = false)</li> </ul> </li> </ul>"},{"location":"configurations/Overview/#walltime-limit","title":"walltime limit","text":"<ul> <li><code>walltime</code> in <code>config.yaml</code></li> </ul>"},{"location":"configurations/Overview/#number-of-ensemble-members","title":"number of ensemble members","text":"<ul> <li><code>ninst</code> in <code>PELAYOUT_attributes</code> in <code>nuopc.runconfig</code></li> </ul>"},{"location":"configurations/Overview/#forcing-data","title":"forcing data","text":"<ul> <li>see the Forcing page</li> <li>atmospheric forcing<ul> <li><code>datm.streams.xml</code> sets individual file paths relative to this entry in the <code>input</code> section of <code>config.yaml</code>; see DATM and streams docs</li> </ul> </li> <li>runoff<ul> <li><code>drof.streams.xml</code> sets individual file paths relative to this entry in the <code>input</code> section of <code>config.yaml</code>; see DROF and streams docs</li> </ul> </li> </ul>"},{"location":"configurations/WW3_parameter_choices/","title":"WW3 Parameter Choices","text":"<p>The current configuration of WAVEWATCH III (WW3) in ACCESS-OM3 uses parameter values for the ST6 source term package in <code>WW3_PreProc/namelists_Global.nml</code>, selected following discussions with the WW3 community. These settings reflect commonly used values that are aligned with best practices in recent applications.</p>"},{"location":"configurations/WW3_parameter_choices/#what-is-the-st6-source-term","title":"\ud83c\udf0a What is the ST6 Source Term?","text":"<p>ST6 is an observation-based source term package for deep-water wave modeling in WW3. It includes:</p> <ul> <li>Wind input (positive and negative)</li> <li>Whitecapping dissipation</li> <li>Swell\u2013turbulence interaction (swell dissipation)</li> </ul> <p>The parameterizations are derived from:</p> <ul> <li>Field measurements at Lake George, Australia (wind input and whitecapping)</li> <li>Laboratory and field studies of swell decay</li> <li>Negative wind input based on lab testing</li> </ul> <p>ST6 also imposes a physical constraint on total wind energy input using the independently known wind stress, improving realism and consistency in wave growth and dissipation behavior.</p> <p>\ud83d\udcda Reference: Rogers, W. E., A. V. Babanin, and D. W. Wang (2012). Observation-consistent input and whitecapping dissipation in a model for wind-generated surface waves: Description and simple calculations. J. Atmos. Oceanic Techn., 29, 1329\u20131346. https://doi.org/10.1175/JTECH-D-11-00092.1</p>"},{"location":"configurations/WW3_parameter_choices/#current-st6-parameters","title":"Current ST6 Parameters","text":"<pre><code>&amp;SIN6 SINA0=0.04 /\n&amp;SWL6 SWLB1=0.22E-03, CSTB1=T /\n&amp;SNL1 LAMBDA=0.237, NLPROP=2.13E+07 /\n</code></pre> <p>These parameters configure wind input (<code>SIN6</code>), swell dissipation (<code>SWL6</code>), and nonlinear interactions (<code>SNL1</code>) for ST6 physics.</p>"},{"location":"configurations/WW3_parameter_choices/#sina0","title":"SINA0","text":"<p><code>SINA0</code> is a tuning parameter in the <code>&amp;SIN6</code> namelist that controls the damping effect of adverse winds in the ST6 wind input scheme. It scales the negative input term that reduces wave growth when the wind opposes wave direction, helping to prevent unrealistic wave energy buildup.</p> <p>Current setting:</p> <pre><code>&amp;SIN6 SINA0=0.04 /\n</code></pre>"},{"location":"configurations/WW3_parameter_choices/#swell-dissipation-in-ww3-swl6","title":"Swell Dissipation in WW3 (<code>&amp;SWL6</code>)","text":"<p>Swell dissipation in WW3 accounts for wave energy loss due to interactions with oceanic turbulence, especially in non-breaking swell conditions. While its effect is small in regions dominated by wind waves, it becomes significant for long swells or parts of the wave spectrum below the breaking threshold.</p> <p>The dissipation is controlled through the <code>&amp;SWL6</code> namelist group in <code>namelists_Global.nml</code>.</p>"},{"location":"configurations/WW3_parameter_choices/#parameters-used","title":"Parameters Used","text":"<pre><code>&amp;SWL6 SWLB1 = 0.22E-03, CSTB1 = T /\n</code></pre> <ul> <li> <p>SWLB1: Sets the dissipation coefficient for swell energy loss.</p> </li> <li> <p>CSTB1: Enables a steepness-based formulation for improved spatial consistency in wave heights.</p> </li> </ul>"},{"location":"configurations/WW3_parameter_choices/#nonlinear-interactions-snl1","title":"Nonlinear Interactions (<code>&amp;SNL1</code>)","text":"<p>The <code>&amp;SNL1</code> namelist configures nonlinear wave\u2013wave interactions, which redistribute energy within the wave spectrum.</p> <pre><code>&amp;SNL1 LAMBDA = 0.237, NLPROP = 2.13E+07 /\n</code></pre> <p>LAMBDA: Tuning factor for interaction strength.</p> <p>NLPROP: Constant in the nonlinear source term.</p>"},{"location":"configurations/WW3_parameter_choices/#pr3-tuning-not-currently-used","title":"\ud83c\udf0a PR3 Tuning (Not Currently Used)","text":"<p>The ACCESS-OM3 WW3 configuration currently uses the PR1 propagation scheme. However, if switching to PR3 in the future, tuning is required to mitigate the garden sprinkler effect (GSE). This tuning is done using the <code>&amp;PRO3</code> namelist.</p> <p>Recommendations for the appropriate <code>WDTHCG</code> and <code>WDTHTH</code> values are given in Chawla and Tolman (2008) and depend on the grid resolution.</p>"},{"location":"configurations/WW3_parameter_choices/#recommended-tuning-factors-for-pr3","title":"Recommended Tuning Factors for PR3","text":"<p>From Table A.1 in Chawla and Tolman (2008):</p> Grid Resolution Tuning Factor (<code>&amp;PRO3 WDTHCG</code>, <code>WDTHTH</code>) Approx Resolution (km) 2\u2032 16 3.7 km 4\u2032 8 7.4 km 8\u2032 4 14.8 km 15\u2032 2 27.8 km 30\u2032 1 55.76 km <p>If PR3 is adopted, these values can be set as based on the Grid resolution:</p> <pre><code>&amp;PRO3 WDTHCG = &lt;value&gt;, WDTHTH = &lt;value&gt; /\n</code></pre> <p>\ud83d\udcda Reference: Arun Chawla, Hendrik L. Tolman (2008), Obstruction grids for spectral wave models, Ocean Modelling, Volume 22, Issues 1\u20132, Pages 12\u201325,doi.org/10.1016/j.ocemod.2008.01.003</p>"},{"location":"configurations/WW3_parameter_choices/#ww3-langmuir-mixing-parameterization-lmpn","title":"\ud83c\udf0a WW3 Langmuir Mixing Parameterization (<code>&amp;LMPN</code>)","text":"<p>The Langmuir Mixing Parameterization (LMP) in WAVEWATCH III (WW3) accounts for additional vertical mixing in the ocean surface boundary layer induced by Langmuir turbulence\u2014a phenomenon caused by the interaction between surface waves and wind-driven currents.</p> <p>This feature is especially relevant when WW3 is coupled to an active ocean model, such as MOM6 or POP2, to improve realism in air-sea fluxes and surface mixing processes in Earth System Models.</p> <p>The configuration is controlled using the <code>&amp;LMPN</code> namelist group.</p>"},{"location":"configurations/WW3_parameter_choices/#key-parameters","title":"Key Parameters","text":"Parameter Description Typical Values <code>LMPENABLED</code> Enables Langmuir mixing parameterization <code>T</code> or <code>F</code> <code>SDTAIL</code> Includes spectral tail contribution to Stokes drift (used for enhanced mixing in high-frequency tail), set to false by default <code>T</code> or <code>F</code> <code>HSLMODE</code> Controls how the surface layer depth (HSL) is defined: <code>0</code> or <code>1</code> - <code>0</code>: Fixed uniform 10m depth (testing mode) - <code>1</code>: Dynamically received from ocean model via coupler"},{"location":"configurations/WW3_parameter_choices/#current-access-om3-coupled-model-configuration","title":"Current ACCESS-OM3 Coupled Model Configuration","text":"<p>In the MOM6\u2013CICE6\u2013WW3 coupled setup, we use:</p> <pre><code>&amp;LMPN\n  LMPENABLED = T,\n  HSLMODE = 1,\n/\n</code></pre> <ul> <li> <p><code>LMPENABLED = T</code>   Activates the Langmuir mixing scheme, improving surface mixing representation in coupled runs.</p> </li> <li> <p><code>HSLMODE = 1</code>   Ensures that the surface layer depth (HSL) is dynamically received from the active ocean model (MOM6) via the coupler.</p> </li> </ul> <p>\u26a0\ufe0f <code>SDTAIL</code> is not enabled in the current setup, meaning spectral tail contributions are excluded.</p> <p>This implementation is based on:</p> <p>Li, Qing, et al. (2016). Langmuir mixing effects on global climate: WAVEWATCH III in CESM. Ocean Modelling, 103, 145\u2013160. https://doi.org/10.1016/j.ocemod.2015.07.020</p>"},{"location":"configurations/WW3_parameter_choices/#wave-ice-interaction-ic3-and-ic4m2-parameterizations","title":"Wave-Ice Interaction: IC3 and IC4M2 Parameterizations","text":"<p>The coupled MOM6\u2013CICE6\u2013WW3 configuration primarily uses IC3, a visco-elastic wave\u2013ice interaction scheme. This document summarizes the parameter choices and also describes an alternative empirical scheme, IC4M2, that has been tested.</p>"},{"location":"configurations/WW3_parameter_choices/#ic3-visco-elastic-model-wang-and-shen-2010","title":"IC3: Visco-Elastic Model (Wang and Shen, 2010)","text":"<p>IC3 treats sea ice as a visco-elastic layer, accounting for: - Ice thickness - Effective viscosity - Ice density - Effective shear modulus</p> <p>This method attenuates wave energy as it propagates into ice-covered regions.</p>"},{"location":"configurations/WW3_parameter_choices/#parameters-used-in-access-configuration","title":"Parameters Used in ACCESS Configuration:","text":"<pre><code>&amp;SIC3\n  IC3CHENG = .TRUE.,\n  USECGICE = .FALSE.,\n  IC3VISC  = 1.0e3,\n  IC3DENS  = 917.0,\n  IC3ELAS  = 1.0e3 /\n</code></pre> <ul> <li><code>IC3CHENG</code>: Enables a stable numerical solver.</li> <li><code>USECGICE</code>: When <code>FALSE</code>, group velocity is not affected by ice.</li> <li><code>IC3VISC</code>: Effective viscosity (m\u00b2/s)</li> <li><code>IC3DENS</code>: Ice density (kg/m\u00b3)</li> <li><code>IC3ELAS</code>: Effective shear modulus (Pa)</li> </ul>"},{"location":"configurations/WW3_parameter_choices/#reference","title":"Reference:","text":"<p>Wang, R., &amp; Shen, H. H. (2010). Gravity waves propagating into an ice-covered ocean: A viscoelastic model. https://doi.org/10.1029/2009JC005591</p>"},{"location":"configurations/WW3_parameter_choices/#ic4m2-empirical-wave-attenuation-scheme-meylan-et-al-2014","title":"IC4M2: Empirical Wave Attenuation Scheme (Meylan et al., 2014)","text":"<p>IC4M2 is an empirical scheme based on polynomial fits to observational data, including a roll-over effect where attenuation levels off at high frequencies.</p>"},{"location":"configurations/WW3_parameter_choices/#equation","title":"Equation:","text":"<p>The attenuation \u03b1 is given by:</p> <p>\u03b1 = C\u2081 + C\u2082\u00b7\u03c3/2\u03c0 + C\u2083\u00b7(\u03c3/2\u03c0)\u00b2 + C\u2084\u00b7(\u03c3/2\u03c0)\u00b3 + C\u2085\u00b7(\u03c3/2\u03c0)\u2074</p> <p>Recommended coefficients (from Meylan et al. 2014):</p> <pre><code>Cice,1...5 = [0, 0, 2.12 \u00d7 10\u207b\u00b3, 0, 4.59 \u00d7 10\u207b\u00b2]\n</code></pre> <p>WW3 must be compiled with the <code>IC4</code> switch to use this wave attenuation scheme.</p>"},{"location":"configurations/WW3_parameter_choices/#reference_1","title":"Reference:","text":"<p>Meylan, M. H., Bennetts, L. G., &amp; Kohout, A. L. (2014). In situ measurements and analysis of ocean waves in the Antarctic marginal ice zone. https://doi.org/10.1002/2014GL060809</p>"},{"location":"configurations/WW3_parameter_choices/#wave-ice-interaction-floe-size-dependent-scattering-and-dissipation-is2","title":"Wave-Ice Interaction:  Floe-size dependent Scattering and dissipation (IS2)","text":"<p>The IS2 source term in WAVEWATCH III accounts for wave scattering and dissipation by sea ice floes. This implementation is based on the approach by Meylan and Masson (2006), with additional processes including:</p> <ul> <li>Floe size\u2013dependent scattering</li> <li>Wave-induced ice breakup (updating maximum floe diameter)</li> <li>Anelastic dissipation, representing internal energy loss in sea ice due to stress oscillations.</li> </ul>"},{"location":"configurations/WW3_parameter_choices/#parameters-used_1","title":"Parameters Used","text":"<pre><code>&amp;IS2ANDISB = .TRUE.,\nIS2BACKSCAT = 0.2,\n</code></pre>"},{"location":"configurations/WW3_parameter_choices/#description","title":"Description","text":"<ul> <li><code>IS2ANDISB = .TRUE.</code> enables anelastic dissipation, allowing energy loss from wave-induced cyclic stress in sea ice.</li> <li><code>IS2BACKSCAT = 0.2</code> sets the fraction of wave energy that is backscattered by ice. Default is 1.0.</li> </ul>"},{"location":"configurations/WW3_parameter_choices/#notes","title":"Notes","text":"<ul> <li><code>IS2UPDATE</code> is set to <code>.FALSE.</code> by default in our configuration, so maximum floe diameter is updated dynamically at every time step.</li> <li><code>IS2UPDATE</code> <code>TRUE</code> \u2013 updates the maximum floe diameter based on external forcing only, and <code>FALSE</code> \u2013 updates the maximum floe diameter at every model time step.</li> </ul>"},{"location":"configurations/WW3_parameter_choices/#reference_2","title":"Reference:","text":""},{"location":"configurations/WW3_parameter_choices/#meylan-m-h-masson-d-2006-a-linear-boltzmann-equation-to-model-wave-scattering-in-the-marginal-ice-zone-ocean-modelling-113-4-417-427","title":"Meylan, M. H., &amp; Masson, D. (2006). A linear Boltzmann equation to model wave scattering in the marginal ice zone. Ocean Modelling, 11(3-4), 417-427.","text":""},{"location":"contributing/","title":"Contributing overview","text":""},{"location":"contributing/#getting-involved-in-access-om3","title":"Getting involved in ACCESS-OM3","text":"<p>There are several ways we welcome feedback and contributions on ACCESS-OM3 development. Contributions from people of all career stages and backgrounds are highly encouraged. All the models and configurations we develop are open source. Development is led by ACCESS-NRI and the COSIMA working group where we follow an open development model building on the work of international modelling consortia.</p>"},{"location":"contributing/#interact-with-developers-in-person","title":"Interact with developers in person","text":"<p>If you would like to interact in person with the development team, we have fortnightly technical working group meetings on Wednesdays at 3pm. They are announced on the access hive forum (subscribe to this thread for notifications) and the meeting minutes are in the TWG category. Everyone is welcome to suggest agenda items and participate.</p> <p>We also have an active and vibrant user community: the COSIMA working group. They have meetings on Thursday at 11:30am that are announced in this access hive forum topic. More information about getting involved is here.</p> <p>We also manage most of our development openly on GitHub and track ACCESS-OM3 work on a GitHub project board here. If you'd like to have your issue considered for ACCESS-OM3 development, please open an issue and add it to the project board using this template.</p>"},{"location":"contributing/#report-a-bug-or-make-a-suggestion","title":"Report a bug or make a suggestion","text":"<p>Technical issues related to ACCESS-OM3 are best posted to github.com/ACCESS-NRI/access-om3-configs/issues. If you would like to discuss the issue first, feel free to post it on the access hive forum.</p>"},{"location":"contributing/#access-om3-configuration-documentation","title":"ACCESS-OM3 configuration documentation","text":"<p>We appreciate contributions, typo and bugs fixes to this documentation. To make suggestions please see Edit Config Docs page.</p>"},{"location":"contributing/#how-to-add-a-community-supported-access-om3-configuration-documentation","title":"How to add a community supported ACCESS-OM3 configuration documentation","text":"<p>We provide protocol and guidance on how to have your configuration supported by ACCESS-NRI. For further details see the Add Supported Config page.</p>"},{"location":"contributing/#contribute-to-one-of-access-om3s-components","title":"Contribute to one of ACCESS-OM3's components","text":"<p>There are several different ways to do this depending on the kind of contribution and the component. Best to get in touch on the access hive forum, ping @ACCESS-NRI/ocean on GitHub or email <code>chris.bull@anu.edu.au</code>.</p>"},{"location":"contributing/Add-Supported-Config/","title":"Add Supported Config","text":""},{"location":"contributing/Add-Supported-Config/#adding-a-new-configuration-to-access-om3-configs","title":"Adding a new configuration to ACCESS-OM3 configs","text":""},{"location":"contributing/Add-Supported-Config/#scope","title":"Scope","text":"<p>There are ACCESS-OM3 global and regional configurations (ACCESS-OM3 and ACCESS-rOM3) that are under active development at ACCESS-NRI and within the communities we collaborate with. Some of the configurations developed outside of ACCESS-NRI have a wider interest and it will be beneficial for these configurations to be supported and maintained at ACCESS-NRI. Here we provide protocol and guidance on how to apply to have your configuration supported by ACCESS-NRI. </p>"},{"location":"contributing/Add-Supported-Config/#what-are-the-benefits","title":"What are the benefits?","text":"<p>When a configuration is supported by ACCESS-NRI then it can be kept up to date with the latest versions of ACCESS-OM3's components, including applying bug fixes, adding new features and upgrades. It will also give more visibility to your configuration, allow others to readily run the configuration and allows for greater community input and collaboration. In some cases, a supported configuration can also benefit from being an official \"release\" meaning there can be additional documentation and provenance of how the configuration was created and run.</p>"},{"location":"contributing/Add-Supported-Config/#criteria","title":"Criteria","text":"<p>Including community developed configurations will require ongoing upkeep and we cannot support all configurations. Supported configurations will need to minimise the upkeep overhead whilst meeting a community need. The following criteria will be considered when deciding which configurations to support. There can be some flexibility in these criteria for the right configuration so if your configuration doesn't fit all criteria then we encourage you to discuss this with us. Conversely, we may decline configurations that fit the criteria if we are already managing many configurations. We encourage starting a conversation with us early in the development of the configuration so we can plan and assist in meeting the criteria. </p>"},{"location":"contributing/Add-Supported-Config/#minimising-overheads","title":"Minimising overheads","text":"<p>The configuration files will need to closely match an existing ACCESS-OM3 or ACCESS-rOM3 configuration to minimise maintenance burden. In particular, the configuration needs to be:</p> <ul> <li>running on the NUOPC coupler; </li> <li>on Gadi;</li> <li>runs using <code>payu</code>;  Files in the new configuration should match an existing configuration as closely as is feasible</li> </ul> <p>The <code>MOM_input</code> can be very different in  configurations due to the need to specify different parameter choices but the layout and order of these specifications should match layout and order of the ACCESS-OM3 configurations. The <code>config.yaml</code> file will differ due to the need to specify different input files and executables but the layout of this file should closely match an ACCESS-OM3 configuration, including pointing to an ACCESS-NRI managed executable. This may sound challenging but the development team is here to help contributors understand and meet these criteria upon review.</p>"},{"location":"contributing/Add-Supported-Config/#community-interest","title":"Community interest","text":"<p>The configuration needs to be useful for a large part of the Australian research community and for a long period of time (min 3 years). Evidence of this could include:</p> <ol> <li>A previous similar domain was well utilised (i.e. a 5 km version was popular, and you now want support for a 1km version);</li> <li>There is a cross-institute grant or funding source (&gt;3 years in length) that uses the configuration;</li> <li>There are already &gt;5 people, across at least 2 institutions that are actively involved in the configuration;</li> <li>A survey of the community indicates a need;</li> <li>You are welcome to suggest other evidence of community interest.</li> </ol>"},{"location":"contributing/Add-Supported-Config/#other-criteria","title":"Other criteria","text":"<p>There needs to be enough documentation provided such that a user can run the configuration and have confidence that they know exactly what they are running. We have a checklist below of the information and steps needed to be available for a configuration to be supported.</p>"},{"location":"contributing/Add-Supported-Config/#support-length","title":"Support length","text":"<p>There is a need to have a timeline for when supported configurations will move to having reduced support, reduced support may mean no updates. This allows new science to be addressed by newer configurations by creating capacity for ACCESS-NRI to take on new configurations. </p> <p>We will discuss and determine the length of time we will support the configuration with you during the application process.</p>"},{"location":"contributing/Add-Supported-Config/#initial-development-of-configuration","title":"Initial development of configuration","text":"<p>Configurations are not expected to initially meet the requirements for an ACCESS-NRI supported configuration. To develop your configuration, you can fork <code>access-om3-configs</code> into your own repository. From there you can create a branch for your configuration and make the necessary changes to your configuration. You can then create a draft pull request back to the <code>ACCESS-NRI/access-om3-configs</code> repository. <code>ACCESS-NRI</code> staff members can assist with this process.</p>"},{"location":"contributing/Add-Supported-Config/#applying-for-a-supported-configuration","title":"Applying for a supported configuration","text":"<p>To apply to have a configuration as a supported configuration, raise an issue on ACCESS-OM3 configs (pick \"blank template\") and describe your configuration and how it meets (or will meet) the criteria.</p> <p>If your configuration does not meet the criteria for being an ACCESS-supported model, then it is still possible to share the model configuration. In this instance, a community member can take responsibility for maintaining the repository. Space for configuration files can be provided upon request on the ACCESS-NRI community repository. These kinds of configurations can still use ACCESS-NRI model releases and <code>payu</code>.</p>"},{"location":"contributing/Add-Supported-Config/#checklist-for-developing-a-supported-configurations","title":"Checklist for developing a supported configurations","text":"<p>Use this checklist whilst developing your configuration to make sure you include relevant information needed and are following the ACCESS-OM3 conventions. </p> <ol> <li>Create documentation of the configuration (see here) for an example.</li> <li>The configuration is running on the NUOPC coupler.</li> <li>The configuration is running stably on an ACCESS-NRI supported ACCESS-OM3 executable.</li> <li>The configuration closely matches the most up-to-date branch of an existing ACCESS-OM3 or ACCESS-rOM3 supported configuration.</li> <li>There isn't a similar ACCESS-OM3 or ACCESS-rOM3 supported configuration that supercedes the configuration.</li> <li>Input netcdf files will need to be shared and include metadata that inform of date and commands used to create the file.</li> <li>Scripts and notebooks used to create the input files need to be available in a public GitHub repository.</li> <li>Your configuration is shared on GitHub on a branch located within a fork of <code>access-om3-configs</code> and has a shared git history with another <code>access-om3-configs</code> configuration.</li> <li>Check that your branch name follows the <code>access-om3-configs</code> branch naming convention (see under the <code>repository-structure</code> heading. For regional models this should start with <code>dev-rM</code> and when specifying the resolution also add a 3-5 letter description of the location. For example: 'dev-rM-tas5km`. </li> <li>Get in touch with the @ACCESS-NRI/ocean team and ask us to create a branch for you on <code>access-om3-configs</code> of the same name and origin such that a pull request can be created.</li> </ol>"},{"location":"contributing/Edit-Config-Docs/","title":"Edit this Documentation","text":""},{"location":"contributing/Edit-Config-Docs/#access-om3-configs-documentation-contributions-welcome","title":"ACCESS-OM3-configs documentation contributions welcome \ud83d\ude4f","text":"<p>This documentation is a work in progress, and we welcome any contributions, including corrections and suggestions.</p> <p>All contributions are welcome but we would particularly appreciate text suggestions (below). Contributions can be made in a few ways:</p>"},{"location":"contributing/Edit-Config-Docs/#quick-contributions","title":"Quick contributions","text":"<p>!!! tip     This method has the advantage is that it's very quick (&lt;1 minute!). The caveat is that, unless you have write access to the <code>access-om3-configs</code> repository, you will not be able to preview the changes rendered into a website or create whole new pages. </p> <p>The simplest and fastest way to make a change to an existing page is to click the edit \"pencil\" on the top-right corner. This will go to the relevant GitHub markdown file and clicking the top-right pencil again on GitHub will allow you to edit the file. Once complete, click <code>Commit changes...</code>. There are then two possibilities, depending on whether you have  write access to <code>access-om3-configs</code>: </p> <ol> <li>No write access (e.g. you are not part of the <code>ACCESS-NRI</code> GitHub organisation): this will prompt you to make a fork and then a pull request (less than 1 minute!). </li> <li>You have write access: please commit changes on a new branch and then use a pull request (this relates to the next option). </li> </ol>"},{"location":"contributing/Edit-Config-Docs/#larger-contributions-online-pr-previews","title":"Larger contributions (online PR-previews)","text":"<p>!!! tip     This method allows you create whole new pages, and to preview the changes rendered into a website. It does not require you to install any software, but is only available for people with write access to <code>access-om3-configs</code>.</p> <p>Create a new branch, e.g. <code>jblogs/doc-update</code>, make doc changes (the documentation sources are in github.com/ACCESS-NRI/access-om3-configs/tree/main/documentation), then open a related PR and a GitHub preview will be made automatically.</p>"},{"location":"contributing/Edit-Config-Docs/#larger-contributions-mkdocs-offline","title":"Larger contributions (<code>mkdocs</code> offline)","text":"<p>!!! tip     Similar to the above, this method allows you create whole new pages and to preview the changes rendered into a website. It works whether or not you have write access to <code>access-om3-configs</code>, but requires you to install <code>mkdocs</code> and takes the longest to set up.</p> <p>Following these instructions but noting the documentation sources are in github.com/ACCESS-NRI/access-om3-configs/tree/main/documentation. You'll need to fork and clone github.com/ACCESS-NRI/access-om3-configs if you want to write your own content (<code>mkdocs serve</code> should be invoked from within the <code>documentation</code> directory).</p> <p>If you want to add a new page, then you need to add another markdown file in the folder (or sub-folder as appropriate): github.com/ACCESS-NRI/access-om3-configs/tree/main/documentation/docs/pages</p> <p>Once done, update the documentation navigation in github.com/ACCESS-NRI/access-om3-configs/blob/main/documentation/mkdocs.yml by adding an entry under the <code>nav:</code> section. Note you'll need to add the sub-folder paths as appropriate.</p>"},{"location":"infrastructure/Architecture/","title":"ACCESS-OM3 architecture","text":"<p>The schematic below illustrates the structure of the MOM6-CICE6-WW3 ACCESS-OM3 executable. ACCESS-OM3 is a single executable, consisting of the NUOPC driver (the main program) and several model components, each wrapped in a NUOPC cap; the caps are coupled through the CMEPS mediator via NUOPC connectors. NUOPC is an interoperability layer for ESMF which standardises how model components interact. See discussions here and here for more information.</p> <p>{: loading=\"lazy\" }</p> <p>The coupled fields and remapping methods used are recorded in the mediator log output file and can be found with <code>grep '^ mapping' archive/output000/log/med.log</code>; see here for how to decode this. See the Configurations Overview page for details on how the coupling is determined.</p>"},{"location":"infrastructure/Architecture/#overview-of-codebase","title":"Overview of codebase","text":"<p>The ACCESS-OM3 software is built from libraries containing the code for each model component.</p> <p>The top level code (main program) for an ACCESS-OM3 executable is the CMEPS NUOPC driver <code>CMEPS/CMEPS/cesm/driver/esmApp.F90</code>.</p> <p>The software deployment compiles a single executable for the model. Each single exectuable contains the driver, CMEPS NUOPC mediator and different selections of these model components:</p> <ul> <li>ocean: MOM6 active model or DOCN prescribed data model from CDEPS or nothing (stub)</li> <li>sea ice: CICE6 active model or DICE prescribed data model from CDEPS or nothing (stub)</li> <li>waves: WW3 active model or DWAV prescribed data model or nothing (stub)</li> <li>atmosphere: DATM prescribed data model from CDEPS</li> <li>runoff: DROF prescribed data model from CDEPS</li> </ul> <p>The default deployment contains two builds, the <code>access-OM3-MOM6-CICE6</code> executable contains the active ocean and sea ice model and no waves, and the <code>access-OM3-MOM6-CICE6-WW3</code> executable contains the active ocean, seaice and wave models. Other combinations of prescribed and active model components are possible but not probided by default.</p> <p>The model components are coupled exclusively through the mediator via their NUOPC caps: MOM6, CICE6, WW3, DOCN, DICE, DATM and DROF.</p>"},{"location":"infrastructure/Architecture/#further-information-coupling","title":"Further information coupling","text":"<ul> <li>Overview of how NUOPC works</li> <li>CMEPS docs</li> <li>NUOPC and ESMF docs</li> <li>NUOPC how-to</li> <li>NUOPC reference</li> <li>ESMF superstructure</li> <li>ESMF glossary</li> <li>MOM6 NUOPC cap docs</li> </ul>"},{"location":"infrastructure/Building/","title":"Building","text":"<p>!!! warning     This page is out of date, and needs to be updated to the new Spack-based build process!</p> <p>If you don't want to use a precompiled executable from an ACCESS-OM3 release, you can build it yourself.</p> <p>Building access-om3 requires membership of the <code>ik11</code> project - apply at https://my.nci.org.au/mancini/project/ik11 if needed.</p> <p>First clone access-om3 following the steps in the README. Then do</p> <pre><code>cd access-om3\n./build.sh\n</code></pre> <p>After a little while you'll get shiny new executables:</p> <pre><code>Release/bin/access-om3-CICE6-WW3\nRelease/bin/access-om3-MOM6-CICE6\nRelease/bin/access-om3-MOM6-CICE6-WW3\nDebug/bin/access-om3-CICE6-WW3\nDebug/bin/access-om3-MOM6-CICE6\nDebug/bin/access-om3-MOM6-CICE6-WW3\n</code></pre> <p>The executables in <code>Releases</code> are optimised for production use. The <code>Debug</code> versions may be useful for getting more information on model crashes, but should not be used for production runs as they are much slower.</p> <p>The executable names are labelled by the included model components. There are additional combinations of components which can be built by changing <code>OFF</code> to <code>ON</code> in this section of <code>CMakeLists.txt</code> and running <code>./build.sh</code> again.</p>"},{"location":"infrastructure/Building/#a-note-on-dependencies","title":"A note on dependencies","text":"<p>ACCESS-OM3 has several dependencies which are unavailable from NCI, so we supply them via Spack using https://github.com/COSIMA/spack-config which is installed in <code>/g/data/ik11/spack/</code>.</p>"},{"location":"infrastructure/Building/#todo","title":"TODO","text":"<ul> <li>comment here on whether the executables are suitable for all cpus (ie queues) on gadi</li> <li>We also want to coordinate with these plans https://github.com/ACCESS-NRI/model_builder</li> </ul>"},{"location":"infrastructure/Building/#for-developers","title":"For developers","text":"<p>Spack-based build instructions are here: https://github.com/ACCESS-NRI/ACCESS-OM2/blob/main/DEVELOPERS.md and the spack environment is at https://github.com/ACCESS-NRI/access-om3</p> <p>To produce release and release-prototypes, raise a PR with the changes on https://github.com/ACCESS-NRI/access-om3. This will deploy at github workflow to automatically build the requested model binary.</p>"},{"location":"infrastructure/Git-practices/","title":"Git practices","text":"<p>ACCESS-OM3 configurations that utilize the same model components are maintained as separate branches in one repo. For example, all ACCESS-OM3 MOM6-CICE6 configurations are branches in the <code>access-om3-configs</code> repo. This simplifies the syncing of changes across related configurations. In order to maintain clean and intuitive branch structure, the following practices should be followed:</p>"},{"location":"infrastructure/Git-practices/#configuration-branch-naming","title":"Configuration branch naming","text":"<p>Each configuration branch name should include as minimum the following: <code>dev/release-{nominal_resolution}deg_{forcing_data}_{forcing_method}</code> - e.g. <code>dev-01deg_jra55_ryf</code>. Additional required information can be appended if relevant, e.g. whether the configuration includes biogeochemistry.</p>"},{"location":"infrastructure/Git-practices/#feature-branch-naming","title":"Feature branch naming","text":"<p>All modifications to configuration branches should be carried out via a pull request from a feature branch. The name of the feature branch should be as follows: <code>{issue_number}-{configuration_branch}</code>, where <code>{issue_number}</code> is the number of a corresponding issue in the GitHub repo that provides context and information about the work being done in the feature branch - e.g. <code>99-dev-01deg_jra55_ryf</code>. Feature branches should be deleted once they are merged.</p>"},{"location":"infrastructure/Git-practices/#branch-synchronisation-for-releases","title":"Branch synchronisation for releases","text":"<p>Prior to a release, configuration branches should be synchronised by cherry-picking across all configurations and across repos, and a new release number created. The <code>!cherry-pick</code> GitHub action makes this easier:</p> <pre><code>!cherry-pick &lt;hash_1&gt; &lt;hash_2&gt; ... &lt;hash_n&gt; into &lt;branch_1&gt; &lt;branch_2&gt; ... &lt;branch_n&gt;\n</code></pre> <p>See more details here.</p>"},{"location":"infrastructure/Git-practices/#production-runs","title":"Production runs","text":"<p>Production runs should be forked as separate repos, and the git runlog enabled.</p>"},{"location":"infrastructure/MOM6-generic-tracers/","title":"MOM6 generic tracers","text":"<p>NOAA-GFDL maintain a number of modules for modelling tracers, implemented via the GFDL \u201cgeneric_tracer\u201d API. These modules are \u201cgeneric\u201d in the sense that they can be used by both MOM and GOLD. They include a number of BGC models (BLING, COBALT, ERGOM, TOPAZ, miniBLING) and other useful tracers (e.g. CFC, SF6). The modules can be found here.</p> <p>Many of the GFDL generic_tracer modules require coupling with other components of the earth system. For example, BLING carries a number of tracers with associated air-sea gas fluxes, runoff fluxes or wet/dry deposition fluxes. Importantly, the additional fluxes required and associated coupled fields\u2014depends on which/how generic_tracers have been configured for use at runtime.</p> <p>In the generic_tracer modules, coupling of these additional tracer fluxes is handled via FMS coupler_types which are designed for use with the FMScoupler. Modifications to ACCESS-OM3 (which uses CMEPS/NUOPC for coupling, not FMScoupler) are required to allow the use of coupled generic_tracer modules. These modifications are described here.</p>"},{"location":"infrastructure/MOM6-generic-tracers/#background","title":"Background","text":""},{"location":"infrastructure/MOM6-generic-tracers/#fms-coupler-types","title":"FMS coupler types","text":"<p>In FMScoupler, the handling of tracer fluxes in a fully-coupled system revolves around three related FMS <code>coupler_1d_bc_type</code> data structures in <code>FMScoupler:flux_exchange_mod</code>:</p> <ul> <li><code>ex_gas_fields_atm</code>: for atmospheric surface fields associated with tracer fluxes and related parameters</li> <li><code>ex_gas_fields_ice</code>: for ice top and ocean surface fields associated with tracer fluxes and related parameters</li> <li><code>ex_gas_fluxes</code>: for tracer fluxes and related fields</li> </ul> <p>Together, these structures define the additional tracer fluxes required, the fields needed for their calculation, and the calculation method/parameters to use (defined by the flux type and implementation). A number of flux types and implementations can be used and are described in the <code>/coupler_mod/types/</code> field manager list (see here for where this list is defined). There are multiple implementations (i.e. calculation methods) for air-sea gas, air-sea deposition and land-sea runoff flux types. Each flux in the <code>ex_gas_*</code> structures has a type and implementation and is associated with an entry in the <code>/coupler_mod/fluxes/</code> field manager list.</p> <p>As an example, suppose we require an additional tracer flux <code>\"co2_flux\"</code> of type <code>\"air_sea_gas_flux_generic\"</code> and implementation <code>\"ocmip2\"</code> (<code>\u201docmip2\u201d</code> describes a particular method for calculating air-sea gas fluxes). After initialising the <code>ex_gas_*</code> structures with this flux, the relevant entry in the <code>/coupler_mod/types/</code> field manager list is:</p> <pre><code>air_sea_gas_flux_generic/\n      implementation/\n            ocmip2/\n                  num_parameters = 2\n            duce/\n                  num_parameters = 1\n            johnson/\n                  num_parameters = 2\n      num_flags = 0\n      use_atm_pressure = T\n      use_10m_wind_speed = T\n      pass_through_ice = F\n      atm/\n            name[1] = 'pcair'\n            name[2] = 'u10'\n            name[3] = 'psurf'\n            long_name[1] = 'Atmospheric concentration'\n            long_name[2] = 'Wind speed at 10 m'\n            long_name[3] = 'Surface atmospheric pressure'\n            units[1] = 'mol/mol'\n            units[2] = 'm/s'\n            units[3] = 'Pa'\n      ice/\n            name[1] = 'alpha'\n            name[2] = 'csurf'\n            name[3] = 'sc_no'\n            long_name[1] = 'Solubility w.r.t. atmosphere'\n            long_name[2] = 'Ocean concentration'\n            long_name[3] = 'Schmidt number'\n            units[1] = 'mol/m^3/atm'\n            units[2] = 'mol/m^3'\n            units[3] = 'dimensionless'\n      flux/\n            name[1] = 'flux'\n            name[2] = 'deltap'\n            name[3] = 'kw'\n            name[4] = 'flux0'\n            long_name[1] = 'Surface flux'\n            long_name[2] = 'Ocean-air delta pressure'\n            long_name[3] = 'Piston velocity'\n            long_name[4] = 'Surface flux no atm'\n            units[1] = 'mol/m^2/s'\n            units[2] = 'uatm'\n            units[3] = 'm/s'\n            units[4] = 'mol/m^2/s'\n</code></pre> <p>the <code>\"co2_flux\"</code> entry in the <code>/coupler_mod/fluxes/</code> field manager list is something like:</p> <pre><code>co2_flux/\n      flux_type = 'air_sea_gas_flux_generic'\n      implementation = 'ocmip2'\n      atm_tr_index = 0\n      mol_wt = 44.0099500000000\n      ice_restart_file = 'ice_bling.res.nc'\n      ocean_restart_file = 'ocean_bling_airsea_flux.res.nc'\n      param[1] = 9.360000000000000E-007\n      param[2] = 9.756100000000000E-006\n      flag = NULL\n      flux-units = 'mol/m^2/s'\n      flux-long_name = 'Surface flux'\n      deltap-units = 'uatm'\n      deltap-long_name = 'Ocean-air delta pressure'\n      kw-units = 'm/s'\n      kw-long_name = 'Piston velocity'\n      flux0-units = 'mol/m^2/s'\n      flux0-long_name = 'Surface flux no atm'\n      pcair-units = 'mol/mol'\n      pcair-long_name = 'Atmospheric concentration'\n      u10-units = 'm/s'\n      u10-long_name = 'Wind speed at 10 m'\n      psurf-units = 'Pa'\n      psurf-long_name = 'Surface atmospheric pressure'\n      alpha-units = 'mol/m^3/atm'\n      alpha-long_name = 'Solubility w.r.t. atmosphere'\n      csurf-units = 'mol/m^3'\n      csurf-long_name = 'Ocean concentration'\n      sc_no-units = 'dimensionless'\n      sc_no-long_name = 'Schmidt number'\n</code></pre> <p>and (assuming <code>ind_co2</code> is the index for the <code>\"co2_flux\"</code> flux): - <code>ex_gas_fields_atm%bc(ind_co2)</code> is initialised to carry the fields <code>pcair</code>, <code>u10</code> and <code>psurf</code> - <code>ex_gas_fields_ice%bc(ind_co2)</code> is initialised to carry the fields <code>alpha</code>, <code>csurf</code> and <code>sc_no</code> - <code>ex_gas_fluxes%bc(ind_co2)</code> is initialised to carry the fields <code>flux</code>, <code>deltap</code>, <code>kw</code> and <code>flux0</code></p> <p>During a coupling loop with FMScoupler the fields for each flux in <code>ex_gas_fields_atm</code> and <code>ex_gas_fields_ice</code> are set and the fluxes in <code>ex_gas_fluxes</code> are calculated from these fields. Importantly, the arrays in the <code>ex_gas_*</code> structures are 1-dimensional (<code>coupler_1d_bc_type</code>). They will store the fields on the exchange grid used in FMScoupler.</p>"},{"location":"infrastructure/MOM6-generic-tracers/#additional-tracer-flux-handling","title":"Additional tracer flux handling","text":"<p>A (greatly) simplified summary of the handling of additional tracer fluxes in FMScoupler is as follows:</p> <ul> <li>Initialise <code>ex_gas_fields_atm</code>, <code>ex_gas_fields_ice</code> and <code>ex_gas_fluxes</code> for the additional tracer fluxes. This step calls initialisation routines within the ocean and atmosphere models to determine what additional tracer fluxes are required. No field arrays set at this point. (via <code>gas_exchange_init</code>).</li> <li>Spawn a 2D version, <code>Ocean%fields</code> (<code>coupler_2d_bc_type</code>), of <code>ex_gas_fields_ice</code>. (via <code>ocean_model_init</code>)</li> <li>Calculate/set field arrays for <code>alpha</code>, <code>csurf</code> and <code>sc_no</code> for air-sea gasfluxes in <code>Ocean%fields</code>. (via <code>ocean_model_init</code>)</li> <li>Spawn a 2D version, <code>Atm%fields</code>, of <code>ex_gas_fields_atm</code>. (via <code>flux_exchange_init</code>)</li> <li>Spawn a 2D version, <code>Ice_ocean_boundary%fluxes</code>, of <code>ex_gas_fluxes</code>. (via <code>flux_exchange_init</code>)</li> <li>&gt;&gt;&gt; Begin coupling loop</li> <li>Set arrays for <code>pcair</code> (air-sea gas fluxes) and <code>deposition</code> (air-sea deposition fluxes) in <code>Atm%fields</code>. (via <code>atmos_tracer_driver_gather_data</code>)</li> <li>Set arrays for <code>u10</code> and <code>psurf</code> for air-sea gas fluxes in <code>Atm%fields</code>. (via <code>sfc_boundary_layer</code>)</li> <li>Map <code>Ocean%fields</code> and <code>Atm%fields</code> onto exchange grid to set 1D fields in <code>ex_gas_fields_ice</code> and <code>ex_gas_fields_atm</code>, respectively. (via <code>sfc_boundary_layer</code>)</li> <li>Calculate fluxes <code>ex_gas_fluxes</code> from <code>ex_gas_fields_ice</code> and <code>ex_gas_fields_atm</code> according to flux types and implementations. (via <code>sfc_boundary_layer</code>)</li> <li>Update atmosphere (this is actually done in multiple steps within a fast coupling loop, but here we\u2019ve simplified)</li> <li>Map 1D <code>ex_gas_fluxes</code> fields onto 2D <code>Ice_ocean_boundary%fluxes</code> (via <code>flux_down_from_atmos</code> and <code>flux_atmos_to_ocean</code>)</li> <li>Update land (this is actually done in multiple steps across two coupling loops, but here we\u2019ve simplified)</li> <li>Update ice (this is actually done in multiple steps across two coupling loops, but here we\u2019ve simplified)</li> <li>Update ocean, applying <code>Ice_ocean_boundary%fluxes</code>. Calculate/set field arrays for <code>alpha</code>, <code>csurf</code> and <code>sc_no</code> for air-sea gas fluxes in <code>Ocean%fields</code>. (via <code>update_ocean_model</code>)</li> <li>&lt;&lt;&lt; End coupling loop</li> </ul>"},{"location":"infrastructure/MOM6-generic-tracers/#schematic-summary","title":"Schematic summary","text":"<p>The schematic below traces the handling of additional tracer fluxes in more detail and shows where simplifications were made in the above summary. Note that I generated this schematic by reading the source code and it hasn\u2019t (yet) been verified by any FMScoupler developer. To the best of my knowledge it is mostly complete/correct but I make no guarantees.</p> <p></p>"},{"location":"infrastructure/MOM6-generic-tracers/#nuopc-coupled-mom6-and-generic_tracers","title":"NUOPC-coupled MOM6 and generic_tracers","text":"<p>Code changes are required to allow the use of coupled generic_tracers with NUOPC-coupled MOM6. These changes are guided by the following design principles:</p> <ul> <li>Use exisiting code where possible, with as little change as possible</li> <li>Avoid making edits to source code in MOM6 or GFDL generic_tracer modules</li> </ul> <p>The code changes are limited to the MOM6 NUOPC cap and broadly do as follows:</p> <ol> <li>Initialisation phases<ol> <li>Initialise <code>coupler_1d_bc_type</code> data structures <code>ex_gas_fields_atm</code>, <code>ex_gas_fields_ocn</code> and <code>ex_gas_fluxes</code>. Note these structures are never actually populated with data (unlike in FMScoupler) - they are just used to spawn 2D structures (<code>coupler_2d_bc_type</code>).</li> <li>Initialise ocean model with (a pointer to) <code>ex_gas_fields_ocn</code> to populate relevant fields.</li> <li>Spawn 2D <code>Ice_ocean_boundary%fluxes</code> from (a pointer to) <code>ex_gas_fluxes</code>.</li> <li>Spawn 2D <code>atm_fields</code> from (a pointer to) <code>ex_gas_fields_atm</code>.</li> <li>Using (a pointer to) <code>ex_gas_fluxes</code>, register with NUOPC the additional atmospheric import fields required flux calculations. Field export has not yet been implemented.</li> </ol> </li> <li>Advance phase<ol> <li>Get/set atmospheric fields in <code>atm_fields</code> from the coupler.</li> <li>Calculate the fluxes in <code>Ice_ocean_boundary%fluxes</code> using a modified version of the routine used by FMScoupler that operates on FMS <code>coupler_2d_bc_type</code> inputs.</li> </ol> </li> </ol> <p>The additional fluxes will be applied from <code>Ice_ocean_boundary%fluxes</code> when the model is advanced.</p>"},{"location":"infrastructure/MOM6-generic-tracers/#code-structure","title":"Code structure","text":"<p>The most important changes made include modifications to:</p> <ul> <li><code>MOM6/config_src/drivers/nuopc_cap/mom_cap.F90</code></li> <li><code>MOM6/config_src/drivers/nuopc_cap/mom_cap_methods.F90</code></li> </ul> <p>and the addition of a new module to the NUOPC cap: <code>mom_cap_gtracer_flux.F90</code></p> <p>Code modifications/additions have been made via patch files found in the <code>MOM6/patches</code> directory. The new module can be found in the <code>MOM6/extra_sources</code> directory.</p>"},{"location":"infrastructure/MOM6-generic-tracers/#the-mom_cap_gtracer_flux-module","title":"The <code>mom_cap_gtracer_flux</code> module","text":"<p>This is where most of the new code is, with many of the changes to <code>mom_cap.F90</code> and <code>mom_cap_methods.F90</code> being calls to routines defined here. This module also includes the data structures <code>ex_gas_fields_atm</code>, <code>ex_gas_fields_ocn</code> and <code>ex_gas_fluxes</code>. Public routines are:</p> <ul> <li><code>gas_exchange_init</code>: initialise <code>ex_gas_fields_atm</code>, <code>ex_gas_fields_ocn</code> and <code>ex_gas_fluxes</code> and optionally returns pointers to them.</li> <li><code>gas_fields_restore</code>: restore an FMS <code>coupler_2d_bc_type</code> state from the ocean restart file defined internally.</li> <li><code>gas_fields_restart</code>: write restart for an FMS <code>coupler_2d_bc_type</code> to the ocean restart file defined internally.</li> <li><code>add_gas_fluxes_param</code>: for each flux in an FMS <code>coupler_2d_bc_type</code>, retrieve the <code>param</code> array from the <code>/coupler_mod/fluxes/</code> field manager list and set it in the <code>coupler_2d_bc_type</code>. This is only needed because spawning a <code>coupler_*d_bc_type</code> does not copy the <code>param</code> array into the spawned type.</li> <li><code>get_coupled_field_name</code>: provides the CMEPS field standard name of any fields that need to be coupled for a given generic_tracer flux name. Currently only generic_tracer fluxes <code>\"co2_flux\"</code> and <code>\"o2_flux\"</code> have been implemented.</li> <li><code>atmos_ocean_fluxes_calc</code>: calculates the tracer fluxes according to their flux type and implementation. This routine was copied from FMScoupler and modified. Key modifications include:<ul> <li>Operate on <code>coupler_2d_bc_type</code> inputs, rather than <code>coupler_1d_bc_type</code>.</li> <li>Include calculation for <code>\"air_sea_deposition\"</code> flux types (which in FMScoupler is done in a separate step)</li> <li>Account for sea-ice fraction (in FMScoupler this is done as part of the exchange grid mapping)</li> <li>Make <code>tsurf</code> input optional, as it is only used by a few implementations</li> </ul> </li> </ul>"},{"location":"infrastructure/MOM6-generic-tracers/#schematic-summary_1","title":"Schematic summary","text":"<p>The schematic below traces the handling of coupled generic_tracer fluxes in the MOM6 NUOPC cap.</p> <p></p>"},{"location":"infrastructure/MOM6-generic-tracers/#diagnostics","title":"Diagnostics","text":"<p>Diagnostics can be output for the FMS <code>coupler_2d_bc_type</code> fields involved in the handling of the tracer fluxes (flux fields: <code>Ice_ocean_boundary%fluxes</code>, ocean fields: <code>ocean_public%fields</code>, atmos fields: <code>atm_fields</code>). The \u201cmodel_name\u201d for each type is: flux fields: <code>\u201cocean_flux\u201d</code>, ocean fields: <code>\u201cocean_sfc\u201d</code>, atmos fields: <code>\u201catmos_sfc\u201d</code>. The naming convention for diagnostics of FMS <code>coupler_bc_type</code>s is: <code>&lt;flux_name&gt;_&lt;field_name&gt;_&lt;suffix&gt;</code>, where <code>&lt;suffix&gt;</code> is <code>\u201d_ice_ocn\u201d</code>, <code>\u201d_ocn\u201d</code> and <code>\u201d_atm\u201d</code> for the flux, ocean and atmos fields, respectively. For example, the surface flux field for the <code>\u201dco2_flux\u201d</code> example above is called <code>\u201dco2_flux_flux_ice_ocn\u201d</code>.</p> <p>The flux and atmos diagnostics are sent immediately after the tracer flux calculation is done, prior to advancing the model. The ocean diagnostics are sent after advancing the model. This means that the flux/atmos diagnostics are not available at Tfinal+dt (whereas the ocean diagnostics are) and the ocean diagnostics are not available at Tstart (whereas the flux/atmos diagnostics are).</p>"},{"location":"infrastructure/MOM6-generic-tracers/#data-override","title":"Data override","text":"<p>FMS data override functionality has been added to allow the tracer fluxes and the contributing atmospheric fields to be overridden via a <code>data_table</code> using the component name <code>\"OCN\"</code>. The naming convention for overriding fields is as described above. E.g. one could override the atmospheric concentration field for the <code>\u201dco2_flux\u201d</code> example above using the fieldname <code>\u201dco2_flux_pcair_atm\u201d</code></p>"},{"location":"infrastructure/NUOPC-driver/","title":"NUOPC driver","text":"<p>We have adopted the NUOPC driver from CESM.</p>"},{"location":"infrastructure/NUOPC-driver/#component-initialisation","title":"Component initialisation","text":"<p>Model component initialisation strategy is specified through a combination of flags set in the <code>nuopc.runconfig</code> configuration file and the input parameter files for each component.</p> <p>The <code>start_type</code> parameter in the <code>ALLCOMP_attributes</code> section of <code>nuopc.runconfig</code> can be set to one of three values (note that the <code>access-om3</code> Payu driver automatically sets this parameter depending on whether the run is an initial or restart run):</p> <ul> <li><code>\"startup\"</code> specifying an initial run,</li> <li><code>\"continue\"</code> specifying a run starting from restart files,</li> <li><code>\"branch\"</code> specifying a run starting from restart files in which properties of the output history files may be changed - not used here.</li> </ul> <p>These have the following effects on each ACCESS-OM3 component\u2019s parameters settings:</p>"},{"location":"infrastructure/NUOPC-driver/#mom6","title":"MOM6","text":"<p>See MOM6 NUOPC cap for details.</p> <code>start_type</code> Interaction with model parameters (from <code>input.nml</code>) <code>\"startup\"</code> Sets parameter <code>restartfiles = \"n\"</code>. <code>\"continue\"</code> / <code>\"branch\"</code> Hardcoded to use restart file specified in a local file <code>rpointer.ocn</code>. <p>Note, users should let NUOPC set the <code>restartfiles</code> parameter. It should not be specified in <code>input.nml</code>.</p>"},{"location":"infrastructure/NUOPC-driver/#cice6","title":"CICE6","text":"<p>See CICE6 NUOPC cap for details.</p> <code>start_type</code> Interaction with model parameters (from <code>ice_in</code>) <code>\"startup\"</code> Sets parameter <code>runtype = \"initial\"</code>. The type of CICE startup can be further configured using the <code>ice_ic</code> parameter in <code>ice_in</code> - see here. <code>\"continue\"</code> / <code>\"branch\"</code> Sets parameters <code>restart = .true.</code> , <code>runtype = \"continue\"</code> and <code>use_restart_time = .true.</code> so uses restart specified in file specified in parameter <code>pointer_file</code>. <p>Note, users should let NUOPC set the <code>restart</code>, <code>runtype</code> and <code>use_restart_time</code> parameters. They should not be specified in <code>ice_in</code>.</p>"},{"location":"infrastructure/NUOPC-driver/#cdeps-components-datm-drof","title":"CDEPS components (DATM, DROF)","text":"<p>See e.g. the atm NUOPC cap and patch, and here for details.</p> <code>start_type</code> Interaction with model parameters (from <code>d{model_name}_in</code>) <code>\"startup\"</code> Does not attempt to read any restarts regardless of parameter values. <code>\"continue\"</code> / <code>\"branch\"</code> If parameter <code>skip_restart_read = .false.</code>, then reads restart specified in file <code>rpointer.{model_name}</code> or reads restart specified in parameter <code>restfilm</code> if it isn't set to <code>\"null\"</code> - see here. <p>Note, restarts are used for the CDEPS components in ACCESS-OM3 only for performance reasons. They\u2019re not needed to restart exactly, but they reduce startup cost associated with reading the input dataset time axis information - see here for more detail.</p>"},{"location":"infrastructure/NUOPC-driver/#time-steps","title":"Time-steps","text":"<p>Also see timestepping section here.</p>"},{"location":"infrastructure/NUOPC-driver/#coupling-and-driver-time-step","title":"Coupling and driver time-step","text":"<p>There's an overview of the NUOPC timekeeping design here.</p> <p>The <code>nuopc.runseq</code> file specifies the run sequence of the configuration. The run sequence for current ACCESS-OM3 configurations comprises a single loop, with the coupling time-step specified at the start of the loop (this is the \u201ctimeStep\u201d of the loop in NUOPC-speak).</p> <p>Note, that there are parameters <code>{model_name}_cpl_dt</code> set in the <code>CLOCK_attributes</code> section of <code>nuopc.runconfig</code>. The only place these are used in CMEPS is to set the driver time-step as the minimum of these values. However from the NUOPC documentation and CMEPS codebase:</p> <p>Each time loop has its own associated clock object. NUOPC manages these clock objects, i.e. their creation and destruction, as well as startTime, endTime, timeStep adjustments during the execution. The outer most time loop of the run sequence is a special case. It uses the driver clock itself. If a single outer most loop is defined in the run sequence provided by freeFormat, this loop becomes the driver loop level  directly. Therefore, setting the timeStep or runDuration for the outer most time loop results modifying the driver clock itself. However, for cases with concatenated loops on the upper level of  the run sequence in freeFormat, a single outer loop is added automatically during ingestion, and the driver clock is used for this loop instead.</p> <p>So I think in our case, <code>{model_name}_cpl_dt</code> are unused and the driver time-step equals the coupling time-step set in <code>nuopc.runseq</code>. Certainly, changing these values seems to have no effect. However, I would feel more comfortable if I understood why <code>{model_name}_cpl_dt</code> are ever needed...</p>"},{"location":"infrastructure/NUOPC-driver/#cice6-time-steps","title":"CICE6 time-steps","text":"<p>The CICE thermodynamics time-step (<code>dt</code>) is set in the CICE NUOPC cap to match the driver time-step, which equals the coupling time-step. Note that this is done before the CICE namelist file (<code>ice_in</code>) is read. Thus issues will occur if <code>dt</code> is set in <code>ice_in</code> but does not match the coupling time-step. It's therefore probably safest not to set <code>dt</code> in <code>ice_in</code>, although other time-step related parameters can be set here. Setting <code>ndtd</code> within <code>ice_in</code> allows for sub-cycling of the sea-ice dynamics to ensure numerical stability and may need to be increased during initial model spin up (the thermodynamics should be numerically stable for any time-step).</p>"},{"location":"infrastructure/NUOPC-driver/#mom6-time-steps","title":"MOM6 time-steps","text":"<p>MOM6 has 4 timesteps - see here and here and here. From shortest to longest they are: barotropic, baroclinic (Lagrangian), tracer, and vertical remapping. Of these, it is common to set at least these 3 timesteps in the <code>MOM_input</code> file:</p> <ul> <li> <p>Barotropic time-step (<code>DTBT</code>) for integration of sea surface and depth-averaged horizontal velocity. If set negative (e.g. <code>DTBT = -0.95</code>), the magnitude of <code>DTBT</code> is interpreted a fraction of the stability limit, so can be set independently of the model configuration (e.g. resolution). <code>DTBT_RESET_PERIOD</code> controls how often the stability limit is recalculated.</p> </li> <li> <p>Baroclinic time-step (<code>DT</code>) for Lagrangian stacked shallow-water equations; often called \"the\" model timestep; needs to be short enough to resolve internal gravity waves, inertial oscillations and advection on the horizontal grid (i.e. this is resolution-dependent).</p> </li> <li> <p>Tracer/thermodynamics time-step (<code>DT_THERM</code>), which can be set to resolve the relevant physics (e.g. an hour or so to capture the diurnal cycle), independent of the horizontal grid resolution. It is possible to set <code>DT_THERM</code> longer than the coupling time-step, but not with <code>DIABATIC_FIRST = True</code>, which is the case for the current ACCESS-OM3 configurations. So <code>DT_THERM</code> should be set equal to, or less than, the coupling time-step.</p> </li> </ul>"},{"location":"infrastructure/Releases/","title":"Releases","text":"<p>!!! warning       This page is out of date, and needs to be updated to the new Spack-based build process! We no longer use the COSIMA respository for ACCESS-OM3 builds</p>"},{"location":"infrastructure/Releases/#releases","title":"Releases","text":"<p>There are several ACCESS-OM3 releases available.</p> <p>Precompiled executables of these are available via spack packages in</p> <pre><code>/g/data/ik11/spack/*/modules/access-om3\n</code></pre> <p>(Access requires membership of the <code>ik11</code> project - apply here if needed.)</p> <p>Those matching ACCESS-OM3 releases are stable, and generally the newest is the recommended version for general use. Those containing \"x\" are unstable development versions which can change without notice.</p> <p>Executables themselves can be found via</p> <pre><code>find /g/data/ik11/spack/*/opt -name \"access-om3-*CICE6*\"\n</code></pre> <p>The file path includes the full ACCESS-OM3 commit hash indicating the sources used.</p> <p>To switch to one of these you need to change the <code>exe:</code> and <code>modules: use:</code> entries in <code>config.yaml</code> in a consistent way - see here for full details. You also need to change the <code>input:</code> entries to the matching version number.</p>"},{"location":"infrastructure/Updating-components/","title":"Updating components","text":"<p>All the components that make up OM3 (models, coupler, etc) are currently included as git submodules and built using CMake. This means that, in a nutshell, updating a given component usually requires updating the git submodule and the CMake build system.</p>"},{"location":"infrastructure/Updating-components/#step-by-step-instructions","title":"Step by step instructions","text":""},{"location":"infrastructure/Updating-components/#submodule-update","title":"Submodule update","text":"<p>!!! warning       This page is out of date, and needs to be updated to the new Spack-based build process! We no longer use the COSIMA respository for ACCESS-OM3 builds</p> <p>Although not required, we recommend starting the process from a clean git repository:</p> <pre><code>git clone --recursive https://github.com/COSIMA/access-om3.git\n</code></pre> <p>Next, go to the directory of the component to update. For example, to update MOM6:</p> <pre><code>cd access-om3/MOM6/MOM6\n</code></pre> <p>and checkout the branch/tag/commit you want to update to:</p> <pre><code>git checkout &lt;branch/tag/commit&gt;\n</code></pre> <p>Some of the components have git submodules themselves. If that's the case, they need also need to be updated:</p> <pre><code>git submodule update --recursive\n</code></pre>"},{"location":"infrastructure/Updating-components/#cmake-update","title":"CMake update","text":"<p>Quite often the changes to the component's sources will include addition and/or removal of files. When this happens, the CMake build system also need to be updated accordingly. The sources are listed in the <code>CMakeLists.txt</code> files that one can find in each component subdirectory. For example, in the case of WW3, that's the <code>WW3/CMakeLists.txt</code> (not <code>WW3/WW3/CMakeLists.txt</code>!).</p> <p>At this point, it might also happen that some patches are not necessary anymore and they will throw an error when building the code. If this happens, one needs to update the corresponding patch. If no patch at all is needed after the update, the corresponding patch should be removed from the git repository:</p> <pre><code>git rm &lt;COMPONENT&gt;/patches/&lt;file&gt;.F90_patch\n</code></pre> <p>and the original source file needs to be moved from the list of sources to patch to the \"normal\" source files list in <code>CMakeLists.txt</code>. The changes should look like this:</p> <pre><code> target_sources(OM3_&lt;target&gt; PRIVATE\n   ...\n+  &lt;file&gt;\n   ...\n )\n ...\n-add_patched_source(OM3_&lt;target&gt; &lt;file&gt;)\n</code></pre>"},{"location":"infrastructure/Updating-components/#new-releases","title":"New Releases","text":"<p>When it is needed to update the model components to incorporate new upstream updates, this triggers a new minor release. These are the high-level steps to update the model component versions:</p> <ol> <li>Choose new component versions: These need to be chosen based on currently known issues/bugs and desired features in the new release. The versions in https://github.com/ESCOMP/CESM/blob/cesm3.0-alphabranch/.gitmodules are a good starting point, as we know NCAR have already checked for compatibility between these versions.</li> <li>Update ACCESS-NRI forks: Where a component is built from an ACCESS-NRI fork, this fork needs updating (at time of writing this is MOM6 &amp; CICE6). Before changing the default branch of the fork, ensure the current state is captured in a <code>&lt;&lt;version&gt;&gt;</code> branch, where version is typically <code>YYYY.MM</code> . The branching practice is described for MOM6 here and the CICE process is very similar. The default branch of the fork then needs updating to the desired code version and any ACCESS specific commits that are not included in the upstream version reapplied (e.g. through a git rebase or cherry-pick). This probably requires a force push to change the history on the default branch.</li> <li>Update dependency versions: Based on any new releases available, update the dependencies. These are releases of code which are not access-om3 model components, they are code which the models depend on (e.g. openmpi, netcdf, fms etc). The versions can be changed in the access-om deployment repository by changing the spack.yaml. Unless there is an interface change, the old access-om3 model components should still build with the new dependencies (try building through spack).</li> <li>Update model components: Its easiest to use a spack \"develop\" environment at this point. For each model component, update the submodule to the desired version. Fix any patches applies by CMAKE so that the model builds. If there are bugs found, raise in the appropriate upstream repository.</li> <li>Test the build: Once you have a build with the new components, try running the build using typical configs (e.g. https://github.com/ACCESS-NRI/access-om3-configs). The config will often need the field dictionary updated from upstream. Each model component and cap may have other changes as described in the release note / git history for that component. Work through any issues and updates until the model runs. </li> <li>Release the build: Once you are happy with the build, tag each model component fork with the new release number (typically CalVer) and this repository with a new release minor release number (e.g. 0.x.0).</li> <li>Deploy: Deploy the new version, using the new release numbers using the CD process in https://github.com/ACCESS-NRI/ACCESS-OM3</li> <li>Update the configurations: Update all https://github.com/ACCESS-NRI/access-om3-configs dev-branches with the build from the new access-om3 deployment &amp; related changed (e.g. <code>fd.yaml</code> and other config changes needed for it to run, including minimum payu version)</li> <li>Tag the update configurations: Tag the updated configuration with the new access-om3 release version.</li> </ol>"},{"location":"inputs/Forcing-data-models/","title":"Forcing","text":"<p>Forcing is provided via CDEPS data models documented here, in particular</p> <ul> <li>DATM for the atmosphere</li> <li>DROF for runoff</li> </ul>"},{"location":"inputs/Forcing-data-models/#coupling","title":"Coupling","text":"<ul> <li>DATM and DROF are coupled to the other components via the mediator - see the coupling architecture here.</li> <li>The coupled fields and remapping methods used are recorded in the mediator log output file and can be found with <code>grep '^ mapping' archive/output000/log/med.log</code>; see here for how to decode this.</li> <li>See the Configurations Overview page for details on how the coupling is determined.</li> </ul>"},{"location":"inputs/Forcing-data-models/#input-data","title":"Input data","text":"<p>JRA55do v1.6, replicated by NCI, is used as input data for DATM and DROF, following convention used in OMIP2 and drafted for OMIP3. For interannual-forcing (IAF) experiments, this data is available from 1958 until January 2024. For repeat-year-forcing (RYF) experiments, a single year of atmosphere and runoff data is selected (Jan-Apr 1991 and May-Dec 1990) using the <code>make_ryf.py</code> script in om3-scripts to generate the input files. This input data is repeated to produce the same input forcing in every model year. Stewart et al. (2020) describe the selected 12-month period to be one of the most neutral across the major climate modes of variability and less affected by the anthropogenic warming found in later years of the dataset. The paper does however remind us that the resulting model is an idealised numerical experiments and not a representation of long-term climatology.</p> <p><code>datm.streams.xml</code> and <code>drof.streams.xml</code> set individual input file paths for DATM and DROF respectively, relative to this entry in the <code>input</code> section of <code>config.yaml</code> (see the Configurations Overview page). These stream files also set time and spatial interpolation, time axes and ranges </p>"},{"location":"inputs/Forcing-data-models/#atmosphere","title":"Atmosphere","text":"<p>JRA55-do atmosphere provides 3-hourly instantenous:</p> <ul> <li>sea level pressure;</li> <li>10m wind velocity components;</li> <li>10m specific humidity;</li> <li>10m air temperature.</li> </ul> <p>and 3-hourly averaged:</p> <ul> <li>liquid and solid precipitation;</li> <li>downwelling surface long-wave and shortwave radiation. </li> </ul> <p>Input data is first remapped from DATM to the mediator, and second from the mediator to the ocean (MOM6). The first step remaps from the source grid (~55km resolution) to the access-om3 grid using bilinear interpolation spatially, and linear interpolation in time (except for downwelling shortwave, which uses \"coszen\" interpolation in time - cosine of the solar zenith angle). Weights for this first remapping are calculated automatically during model initialisation. The second stage remapping moves from the om3 grid without a landmask to the same grid with a landmask. For atmosphere forcing, the landmask is applied simply as a true/false mask, as access-om3 does not have partial ocean cells. This results in only the states and fluxes over the ocean being input as forcings.</p>"},{"location":"inputs/Forcing-data-models/#runoff","title":"Runoff","text":"<p>JRA55-do runoff provides 12-hourly averaged liquid and frozen runoff fields, although the runoff at many locations in the dataset is updated less frequently than 12-hourly. In the source data, all frozen run-off is distributed at the ocean surface of the Antarctic/Greenland coastlines without spreading (see 404). </p> <p>Similar to atmsophere forcing, runoff data is first remapped from DROF to the mediator, and second from the mediator the the ocean (MOM6). The first mapping step is similar to the atmospheric forcing, namely using bilinear interpolation spatially and linear interpolation in time. The second stage remapping moves from the om3 grid without a landmask to the same grid with a landmask. For runoff, the differences in landmask between the incoming data on the JRA grid and the om3-grids can cause runoff to be remapped to land cells. When runoff would be placed on land cells, the volume of runoff is crudely moved to the nearest ocean cell using pre-generated weights from the generate_rof_weights.py script. generate_rof_weights.py selects the nearest ocean cell by a BallTree algorithm using Haversine distances (i.e. the shortest disance on a sphere). The combined effect of the two remapping steps is that the full global volume of runoff enters the ocean.</p>"},{"location":"inputs/Forcing-data-models/#ice-surface-wind-stress","title":"Ice surface wind stress","text":"<p>This is calculated in CICE6 (IcePack). The wind velocity, specific humidity, air density and potential temperature at the level height <code>zlvl</code> (with optionally a different height <code>zlvs</code> for scalars) are used to compute transfer coefficients used in formulas for the surface wind stress and turbulent heat fluxes.</p> <p>The CICE6 forcing settings are in namelist group <code>forcing_nml</code> in <code>cice_in</code>. Many are unspecified and therefore take the default values. We use the default <code>atmbndy = 'similarity'</code>, which uses a stability-based boundary layer parameterisation based on Monin-Obukhov theory following Kauffman and Large (2002). Because our ice-ocean coupling frequency resolves inertial oscillations we use the non-default option <code>highfreq = .true.</code> (Roberts et al., 2015), which uses the relative ice-atmosphere velocity to calculate the wind stress on the ice. The exchange coefficients for momentum and scalars are determined iteratively, with a convergence tolerance <code>atmiter_conv</code> on <code>ustar</code> and maximum <code>natmiter</code> iterations. These take default values <code>atmiter_conv = 0.0</code> and <code>natmiter = 5</code>. We don't use spatiotemporally variable form drag (<code>formdrag = .false</code>, the default).</p>"},{"location":"inputs/Forcing-data-models/#ocean-surface-stress","title":"Ocean surface stress","text":"<p>Ocean surface stress is a combination of wind stress and ice-ocean stress. <code>Foxx_taux</code> and <code>Foxx_tauy</code> are the components of this combined surface stress received by the MOM6 cap, and are calculated in the mediator. <code>Foxx_taux</code> is a weighted sum of <code>Fioi_taux</code> (the ice-ocean stress) and <code>Faox_taux</code> (the atmosphere-ocean stress), weighted by the fraction of ice and open ocean in each cell. Similarly, <code>Foxx_tauy</code> is a weighted sum of <code>Fioi_tauy</code> and <code>Faox_tauy</code>. The prefix <code>Foxx</code> denotes an ocean (<code>o</code>) - mediator (<code>x</code>) flux (<code>F</code>) calculated by the mediator (<code>x</code>). Similarly <code>Fioi</code> denotes an ice (<code>i</code>) - ocean flux calculated by the ice component, and <code>Faox</code> indicates an atmosphere (<code>a</code>) - ocean flux calculated by the mediator (see here for details on this notation). Thus <code>Fioi_taux</code> is calculated in CICE6, whereas <code>Faox_taux</code> is calculated in the mediator (similarly for the y components).</p>"},{"location":"inputs/Forcing-data-models/#ice-ocean-stress","title":"Ice-ocean stress","text":"<p>The ice-ocean stress components <code>Fioi_taux</code> and <code>Fioi_tauy</code> are calculated in CICE6. <code>Fioi_taux</code> and <code>Fioi_tauy</code> are mapped from <code>tauxo</code> and <code>tauyo</code> in the CICE6 cap, which are in turn calculated in the CICE6 cap from <code>strocnxT_iavg</code> and <code>strocnyT_iavg</code>, which are per-ice-area quantities at T points calculated from per-cell-area stresses at U points <code>strocnxU</code> and <code>strocnyU</code>. <code>strocnxU</code> and <code>strocnyU</code> are calculated by subtroutine <code>dyn_finish</code> using this code; see equation (4) here and equation (2) here for an explanation. We use a turning angle $\\theta=0$ (<code>cosw = 1.0</code>, <code>sinw = 0.0</code>, the defaults), which is appropriate for an ocean component with vertical resolution sufficient to resolve the surface Ekman layer. We don't use spatiotemporally variable form drag (<code>formdrag = .false</code>, the default).</p> <p>TODO: what namelist controls the ice-ocean stress calculation? </p>"},{"location":"inputs/Forcing-data-models/#atmosphere-ocean-stress","title":"Atmosphere-ocean stress","text":"<p>The atmosphere-ocean stress components <code>Faox_taux</code> and <code>Faox_tauy</code> are calculated in the mediator. We calculate <code>Faox_taux</code> and <code>Faox_tauy</code> using <code>ocn_surface_flux_scheme = 0</code> in <code>nuopc.runconfig</code>, which is the default CESM1.2 scheme. This iterates towards convergence of <code>ustar</code> to a relative error of less than <code>flux_convergence = 0.01</code>, if this can be achieved in <code>flux_max_iteration = 5</code> iterations or fewer. The atmosphere-ocean stress is calculated using the relative wind, i.e. the difference between the surface wind and surface current velocity.</p>"},{"location":"inputs/Forcing-data-models/#references","title":"References","text":"<p>K.D. Stewart, W.M. Kim, S. Urakawa, A.McC. Hogg, S. Yeager, H. Tsujino, H. Nakano, A.E. Kiss, G. Danabasoglu, JRA55-do-based repeat year forcing datasets for driving ocean\u2013sea-ice models, Ocean Modelling, Volume 147, 2020, https://doi.org/10.1016/j.ocemod.2019.101557.</p>"},{"location":"inputs/Grids/","title":"Grids","text":""},{"location":"inputs/Grids/#horizontal-grid","title":"Horizontal grid","text":"<p>All ACCESS global ocean and sea-ice models use a tripolar grid. For ACCESS-OM3, new grids will be created from scratch for all resolutions. So-far a new grid  (1142 x 1440 cells) has been created for 25km configurations.  The 25km grid and future OM3 grids largely follows the grids used in OM2, with some refinements to increase resolution and extent around Antarctica, and align the equator with model cell centres, rather than edges.</p> <p>Ocean cells cover the global ocean from the North Pole to south of the Antarctic ice shelf edge (81\u00b0 S). The longitude range is \u2212280 to +80\u00b0 E, placing the join in the middle of the Indian Ocean. The grid is defined using the conventional tripolar definition(Murray, 1996)[^Murray1996a]  in all configurations, with two northern poles placed on land at 65\u00b0 N, \u2212100\u00b0 E and 65\u00b0 N, 80\u00b0 E, and a third pole at the South Pole; consequently, the grid directions are zonal and meridional only south of 65\u00b0 N. The grid is Mercator (i.e. the meridional spacing scales as the cosine of latitude) between 65\u00b0 N and 65\u00b0 S; south of 65\u00b0 S, the meridional grid spacing is held at the same value as at 65\u00b0 S.</p>"},{"location":"inputs/Grids/#file-formats","title":"File formats","text":"<p>The grid is defined in two file formats, the MOM supergrid and the ESMF mesh, however they represent the same grid. First the grid is created using the python Ocean Model Grid Generator,  to generate a MOM supergrid file. The MOM supergrid splits each model cell into four supergrid cells. </p> <p>As an example, the 25km grid was once generated using the python based ocean model grid generator using these arguments:</p> <pre><code>ocean_grid_generator.py -r 4 --no_south_cap --ensure_nj_even --bipolar_lower_lat 65 --mercator_lower_lat -75 --mercator_upper_lat 65 --match_dy so --shift_equator_to_u_point --south_ocean_lower_lat -81\n</code></pre> <p>However refer to the metadata of the latest <code>ocean_hgrid.nc</code> to find the latest setup.</p> <p>Secondly, an ESMF Mesh file is derived from the MOM supergrid.  The MOM supergrid file is used by the MOM and CICE model components, whilst the ESMF Mesh file is used in the coupler.  (Additional ESMF mesh files exist for the data atmosphere and runoff components). How to configure these in the model is captured in the configurations page.</p> <p>For analysis, it's best to use model grids output by the models:</p> <ul> <li>MOM6 outputs the model grid, typically in a file named access-mom6.static...</li> <li>CICE6 also outputs the model grid, in a file named <code>access-om3.cice.static.nc</code></li> </ul> <p>If you are using coupler diagnostics (off by default), note that the grid areas used in the coupler are calculated internally and  are subtly different to the grid areas used in the model components. The model component caps apply a correction between model areas and mediator areas. </p>"},{"location":"inputs/Grids/#vertical-grid","title":"Vertical grid","text":"<p>In the ocean model, we use a 75 level vertical grid unchanged from many OM2 configurations, following Stewart et al.(2017)(Stewart et al., 2017)[^StewartHoggGriffiesHeerdegenWardSpenceEngland2017a].</p>"},{"location":"inputs/Grids/#aditional-reading","title":"Aditional reading:","text":"<ul> <li>Cheat sheet for using a Mosaic grid with MOM6 output</li> <li>Gridspec: A standard for the description of grids used in Earth System models  [^Murray1996a]: Murray, R. J. (1996). Explicit generation of orthogonal grids for ocean models. Journal of Computational Physics, 126(2), 251--273. https://doi.org/10.1006/jcph.1996.0136 [^StewartHoggGriffiesHeerdegenWardSpenceEngland2017a]: Stewart, K. D., Hogg, A. McC., Griffies, S. M., Heerdegen, A. P., Ward, M. L., Spence, P., &amp; England, M. H. (2017). Vertical resolution of baroclinic modes in global ocean models. Ocean Modelling, 113, 50--65. https://doi.org/10.1016/j.ocemod.2017.03.012</li> </ul>"},{"location":"inputs/Initial-conditions-generation/","title":"Generating MOM6 Initial Conditions Using WOA23 dataset","text":"<p>This guide outlines the steps to generate initial-condition fields for MOM6 from World Ocean Atlas 2023 (WOA23) data. The workflow produces Conservative Temperature (CT) and Absolute Salinity (SA), the prognostic variables required by the TEOS-10 equation of state (EOS) for use in ACCESS-OM3.</p>"},{"location":"inputs/Initial-conditions-generation/#repository-and-requirements","title":"Repository and Requirements","text":"<p>Clone the repository that includes all necessary tools and submodules:</p> <pre><code>git clone --recursive https://github.com/ACCESS-NRI/initial_conditions_access-om3.git\ncd initial_conditions_access-om3\n</code></pre> <p>A recursive clone is needed because this repository includes Nic Hannah\u2019s ocean-ic code as a submodule, used to interpolate WOA23 data onto MOM6 3D grids.</p>"},{"location":"inputs/Initial-conditions-generation/#step-1-optional-regenerate-temperature-salinity-from-raw-woa23","title":"Step 1: (Optional) Regenerate Temperature &amp; Salinity from Raw WOA23","text":"<p>Use this step only if you want to regenerate T/S fields from a different version of World Ocean Atlas dataset, or are changing the EOS in MOM6,  and the form of temperature and salinity used prognostically in MOM6 is changing.</p> <pre><code>./inte.csh\n</code></pre> <p>The <code>inte.csh</code> script processes World Ocean Atlas 2023 (WOA23) data to create consistent monthly temperature and salinity fields suitable for generating MOM6 initial conditions.</p>"},{"location":"inputs/Initial-conditions-generation/#purpose","title":"Purpose","text":"<p>By default, WOA23 provides: - Full-depth annual mean data (<code>XX = 00</code>) - Monthly data (<code>XX = 01\u201312</code>) only for the upper 1500\u202fm - Seasonal data (<code>XX = 13\u201316</code>) covering full depth</p> <p>To use full-depth data with monthly resolution, <code>inte.csh</code> reconstructs it by combining seasonal deep data with monthly shallow data. The WOA23 dataset is based on oceanographic observations collected over the period 1955 to 2022.</p>"},{"location":"inputs/Initial-conditions-generation/#what-the-script-does","title":"What the Script Does","text":"<ol> <li>Extract salinity (<code>s_an</code>) from seasonal full-depth data and expand it to monthly resolution.</li> <li>Use <code>ncks --mk_rec time</code> to add an unlimited time dimension to make the NetCDF files record-aware.</li> <li>Rename the salinity variable from <code>s_an</code> to <code>practical_salinity</code> for compatibility with the processing pipeline.</li> <li>Run <code>setup_WOA_initial_conditions.py</code> to merge the monthly upper-ocean data with the seasonal lower-ocean data. During this step, in-situ temperature is converted to CT and practical salinity is converted to SA, ensuring consistency with the TEOS-10 EOS.</li> </ol> <p>The processed monthly files are output to:</p> <pre><code>/g/data/ik11/inputs/access-om3/woa23/monthly/YYYY.MM.DD\n</code></pre> <p>\ud83d\udca1 You only need to run this script if you're updating or modifying the WOA23 dataset or prognostic form of temperature or salinity. Otherwise, skip this step and proceed directly to regridding using <code>make_initial_conditions.sh</code>.</p>"},{"location":"inputs/Initial-conditions-generation/#step-2-regrid-to-mom6-grid","title":"Step 2: Regrid to MOM6 Grid","text":"<p>Use the regridding script to interpolate temperature and salinity to your MOM6 model grid.</p> <pre><code>cd initial_conditions_WOA/\nqsub -v VGRID=\"&lt;path_to_vgrid_file&gt;\",HGRID=\"&lt;path_to_hgrid_file&gt;\",INPUT_DIR=\"&lt;path_to_input_directory&gt;\",OUTPUT_DIR=\"&lt;path_to_output_directory&gt;\" -P $PROJECT make_initial_conditions.sh\n</code></pre> <p>Replace the variables with your grid and directory paths:</p> <ul> <li><code>VGRID</code>: MOM6 vertical grid file</li> <li><code>HGRID</code>: MOM6 horizontal grid file</li> <li><code>INPUT_DIR</code>: Directory with processed WOA23 monthly files</li> <li><code>OUTPUT_DIR</code>: Where regridded output will be saved</li> </ul> <p>Note: This code is not parallelised and may take approximately 24 hours to run for the 25km (0.25\u00b0) resolution grid.</p>"},{"location":"inputs/Initial-conditions-generation/#step-3-finalize-tag-metadata","title":"Step 3: Finalize &amp; Tag Metadata","text":"<p>Once satisfied with the output, run:</p> <pre><code>./finalise.sh -o /g/data/ik11/inputs/access-om3/woa23/025/\n</code></pre> <p>This: - Commits any changes with <code>git</code> - Adds Git metadata to the NetCDF metadata</p>"},{"location":"inputs/Initial-conditions-generation/#notes","title":"Notes","text":"<ul> <li>Make sure to adjust paths in <code>inte.csh</code> if you change the WOA23 dataset.</li> <li>You can repeat Step 2 to generate initial conditions for any resolution. Step 1 is agnostic of the model resolution as the data is on the WOA23 grid.</li> </ul>"},{"location":"inputs/Topography-generation/","title":"ACCESS-OM3 Topography Workflow","text":""},{"location":"inputs/Topography-generation/#introduction","title":"Introduction","text":"<p>The supported ACCESS-OM3 configurations now use a topography based on the GEBCO2024 global topography dataset. This dataset maintains a high resolution of 15 arc-seconds (i.e., 1/240 deg = ~460m at the equator and finer zonally near the poles).</p>"},{"location":"inputs/Topography-generation/#bathymetry-tools","title":"Bathymetry Tools","text":"<p>The workflow described below uses <code>bathymetry-tools</code> to perform specific tasks, such as removing seas or generating the land/sea mask. Instructions to install <code>bathymetry-tools</code> can be found here.</p>"},{"location":"inputs/Topography-generation/#general-workflow","title":"General Workflow","text":"<p>The general workflow for generating the OM3 topography and corresponding land/sea masks is as follows:</p> <ol> <li>Interpolate GEBCO2024 data onto the model grid.</li> <li>Adjust C-grid connectivity using the <code>deseas</code> algorithm to ensure marginal seas with 1-cell-wide outlets (e.g., Gibraltar) remain connected to the ocean.</li> <li>Remove T cells that are smaller than the given threshold.</li> <li>Fill cells with a sea area fraction smaller than 0.5.</li> <li>Apply manual topography edits using <code>editTopo.py</code>.</li> <li>Remove isolated seas.</li> <li>Apply minimum and maximum allowed ocean depths.</li> <li>Generate the land/sea mask from the topography.</li> <li>Generate additional necessary model input files, such as ESMF meshes and runoff remapping weights.</li> </ol> <p>This workflow assumes that a horizontal super-grid has already been created and that the model uses a C-grid. Some manual editing may still be necessary to refine the topography.</p> <p>For a complete workflow and instructions on generating OM3 topography, refer to the make_OM3_025deg_topo repository.</p>"},{"location":"inputs/Topography-generation/#updating-restarts-for-new-bathymetry","title":"Updating restarts for new bathymetry","text":"<p>If the MOM bathymetry file (topog.nc) needs to be changed on an existing run it's ocean and coupler restarts will likely need to be adjusted to match. Otherwise the restarts may not contain valid data at all points. This section describes a method for doing this. This github issue comment may also be helpful.</p>"},{"location":"inputs/Topography-generation/#updating-ocean-restart-files","title":"Updating Ocean restart files","text":"<p>The approach taken is to create ocean restart files that match the new bathymetry (we call these the template restarts), then copy over all valid data from restarts for the existing run (the old restarts). The end result will be a restart that is the same as the existing run at all points which exist in both the old and the template (the new restarts). Any new points that don't exist in the old restarts will contain whatever existed in the template restarts. This approach is simple but has a drawback \u2014 if the bathymetry has changed a lot, some points will use values from the template that may not match the surrounding fields from the old restart, leading to possible inconsistencies, see 611 for an example. Increasing the <code>BAD_VAL</code> limits in MOM6 can help the model to run for a few years until the ocean state has equilibrated. </p> <p>Step by step:</p> <ol> <li> <p>Clone <code>om3-scripts</code>. This contains <code>apply_bathy_mom_restarts.py</code> script in <code>restart_modifications</code> directory that does the copying described above.</p> <p><code>git clone https://github.com/ACCESS-NRI/om3-scripts/tree/main</code></p> </li> <li> <p>Generate new restart files using new bathymetry</p> <p>New template restart files must be generated from a simulation using the updated topog.nc bathymetry. If such a simulation doesn't exist, you will need to create the restart files by performing a short ACCESS-OM3 run from rest\u2014typically a single time step is sufficient. This run must use the new bathymetry (<code>topog.nc</code>) file.</p> </li> <li> <p>Start an interactive PBS session with additional CPUs and memory, e.g.:</p> <p><code>bash qsub -I -v DISPLAY -q normalbw -l ncpus=4,mem64Gb,walltime=10:00:00,storage=gdata/ik11+gdata/vk83+gdata/xp65</code></p> <p>(add other storage points as appropriate)</p> </li> <li> <p>Run the <code>apply_bathy_mom_restarts.py</code> script from <code>restart_modifications</code> directory to create new MOM restarts based on the old restarts but with the new bathymetry and any new ocean points filled in with the template, e.g.:</p> <p><code>bash cd om3-scripts/restart_modifications python apply_bathy_mom_restarts.py --help python apply_bathy_mom_restarts.py --template_dir new_restart_dir --old_dir old_restart_dir --output_dir patched_restart_dir --template_prefix access-om3.mom6.r.1900-01-01-00000 --old_prefix access-om3.mom6.r.1900-01-01-00000 --nprocs 4</code> This can take quite a while. Note that <code>apply_bathy_mom_restarts.py</code> requires python and some dependencies --  these are available through <code>module use /g/data/xp65/public/modules; module load conda/analysis3</code>.</p> </li> <li> <p>The patched restart files will be written to the directory given by <code>--output_dir</code> (e.g., patched_restart_dir). These files are updated versions of the template restarts, with valid ocean data from the old restarts inserted where applicable.</p> </li> </ol>"},{"location":"inputs/Topography-generation/#updating-coupler-restart-files","title":"Updating Coupler Restart Files","text":"<p>If the change in bathymetry adds or removes surface ocean cells, then the coupler restart file also needs updating.</p> <ol> <li> <p>Prepare required files</p> <p>Ensure you have the following:</p> <p>The old coupler restart file from the run using the old bathymetry (e.g., <code>access-om3.cpl.r.0000-01-01-00000.nc</code>)</p> <p>The new land mask file corresponding to the updated bathymetry (e.g., <code>kmt.nc</code>)</p> <p>The name of the land mask variable inside the mask file (usually <code>kmt</code>)</p> </li> <li> <p>Start an interactive PBS session (if needed)</p> <p><code>qsub -I -v DISPLAY -q normalbw -l ncpus=2,mem=32GB,walltime=02:00:00,storage=gdata/ik11+gdata/vk83+gdata/xp65`</code> </p> <p>Add any additional storage paths your data resides in.</p> </li> <li> <p>Run the coupler restart fix script <code>remask_cpl_restart.py</code> from <code>om3-scripts/restart_modifications</code></p> <p>``` bash cd om3-scripts/restart_modifications python3 remask_cpl_restart.py --input_file /path/to/access-om3.cpl.r.0000-01-01-00000.nc --output_file /path/to/access-om3.cpl.r.0000-01-01-00000.nc --mask_file /path/to/kmt.nc --mask_var kmt</p> <p><code>python3 remask_cpl_restart.py --input_file /path/to/access-om3.cpl.r.0000-01-01-00000.nc --output_file /path/to/access-om3.cpl.r.0000-01-01-00000.nc --mask_file /path/to/kmt.nc --mask_var kmt</code> ```</p> </li> <li> <p>Check the output</p> <p>The script will produce a new coupler restart file in the filename as specified by --output_file, </p> <p>This file contains surface-level fields where missing values have been filled and re-masked using <code>kmt.nc</code>. It is now ready for use in your ACCESS-OM3 simulation with updated bathymetry.</p> </li> <li> <p>Copy other restart files into the new restart directory</p> <p>Create a new directory to hold a complete set of restart files for your simulation (with the updates).</p> <p>Place the modified MOM6 and coupler restart files (produced by the scripts) in this directory.</p> <p>Copy the unmodified restart files from other components (e.g., CICE, DATM, DROF) from your old restart directory into this same directory.</p> <p>Example files to copy alongside MOM6 and CPL restarts: <code>access-om3.cice.r.1900-01-01-00000.nc   access-om3.datm.r.1900-01-01-00000.nc   access-om3.drof.r.1900-01-01-00000.nc</code></p> <p>This ensures the new restart directory contains a complete, consistent set of restart files with updates only to MOM6 and the coupled components.</p> <p>Set this as the restart directory for a new experiment, using the <code>restart:</code> line in the <code>config.yaml</code> Payu will use this as the restart for the experiment.  or the the <code>-r</code> flag when running <code>payu clone</code></p> </li> </ol>"},{"location":"inputs/WW3_setup_and_workflow/","title":"WW3 workflow and input files","text":""},{"location":"inputs/WW3_setup_and_workflow/#mom6-cice6-ww3-in-access-om3","title":"MOM6-CICE6-WW3 in ACCESS-OM3","text":""},{"location":"inputs/WW3_setup_and_workflow/#overview-typical-vs-wave-coupled-configurations","title":"Overview: Typical vs Wave-coupled Configurations","text":"<p>In the ACCESS-OM3, the typical configurations include the ocean model (MOM6) coupled with the sea-ice model (CICE6). Introducing the wave model (WAVEWATCH III, or WW3) as a third component adds additional complexity to the coupled system. This documentation outlines how the MOM6\u2013CICE6\u2013WW3 coupled system differs from the standard MOM6\u2013CICE6 setup, focusing on the additional intricacies introduced by WW3. Key differences include:</p> <ul> <li>Preprocessing and Binary Inputs: Usually in MOM6 and CICE6, users define input parameters in plain text files such as <code>MOM_input</code> and <code>ice_in</code>. However, in WW3, input parameters must be used to generate binary input files like <code>mod_def.ww3</code> and <code>restart.ww3</code>. These are generated using the defined parameters in <code>WW3_PreProc/namelists_Global.nml</code>, <code>WW3_PreProc/ww3_grid.nml</code>, and <code>WW3_PreProc/ww3_strt.inp</code> located in the <code>WW3_PreProc</code> directory of the MOM6-CICE6-WW3 configuration. For example, see this configuration.</li> <li>Namelist vs Compile-Time Settings: WW3 uses namelist files for configuration, but it only honors parameters for features that were enabled at compile time. Inactive namelist options (those without corresponding compile-time switches) are ignored by WW3.</li> <li>Manual Input Generation: Automatic generation of WW3\u2019s binary inputs within the Payu workflow is not fully implemented. Users must undertake certain manual preprocessing steps (using WW3 utilities executables) to prepare the required files.</li> <li>Re-Generation Triggers: Changes to the wave model\u2019s grid or fundamental configuration (e.g. spectral grid or source term parameterizations) necessitate regenerating the WW3 binary input files. In some cases, changes also require rebuilding (recompiling) WW3 with different compile-time options.</li> <li>Compile-Time Flexibility and Complexity: WW3\u2019s design is highly flexible at compile time \u2013 many features are toggled via compile-time switches. This introduces complexity for users, since exploring new features or physics often means recompiling the model and updating associated inputs, rather than simply editing a runtime namelist.</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#preprocessing-binary-input-files-required-by-ww3","title":"Preprocessing &amp; Binary Input Files Required by WW3","text":"<p>{: loading=\"lazy\"}</p> <p>The grid preprocessor (<code>ww3_grid</code>) takes static grid data files located in the <code>WW3_PreProc</code> directory \u2014 including <code>OM2_1.Dpt</code> (bathymetry), <code>OM2_1.Lat</code> and <code>OM2_1.Lon</code> (coordinates), <code>OM2_1.Mask</code> (land mask), and <code>OM2_1.Obstr</code> (obstruction) \u2014 and produces the binary grid definition file <code>mod_def.ww3</code>. Similarly, an initialization tool (<code>ww3_strt</code>) creates a binary <code>restart.ww3</code> based on the <code>ww3_strt.inp</code>  file representing the initial wave state. These binary files are then consumed by the WW3 model during the simulation.</p> <ul> <li>Dependency on Pre-Generated Files: WW3 expects <code>mod_def.ww3</code> and usually a <code>restart.ww3</code> to be present before a coupled run can start.</li> <li>WW3 Grid Definition (<code>mod_def.ww3</code>): Encodes grid layout and spectral discretization. Generated by <code>ww3_grid</code> using inputs like <code>OM2_1.Dpt</code>, <code>OM2_1.Lat</code>, <code>OM2_1.Lon</code>, <code>OM2_1.Mask</code>, and <code>OM2_1.Obstr</code>.</li> <li>WW3 Restart File (<code>restart.ww3</code>): Represents initial wave state. Generated by <code>ww3_strt</code>. Must be present even for a \"cold start\".</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#namelist-inputs-vs-compile-time-switches-in-ww3","title":"Namelist Inputs vs Compile-Time Switches in WW3","text":"<ul> <li>WW3 only recognizes namelist parameters associated with compile-time switches.</li> <li>If an option is not compiled into WW3, related namelist entries in <code>WW3_PreProc/namelists_Global.nml</code> will be silently ignored.</li> <li>Unlike MOM6/CICE6, WW3 does not usually abort on unrecognized namelist entries.</li> <li>Users must understand their compiled configuration to ensure expected behavior.</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#manual-generation-of-ww3-inputs-current-workflow","title":"Manual Generation of WW3 Inputs (Current Workflow)","text":"<p>Steps to follow manually:</p> <ul> <li>Run <code>ww3_grid</code> to generate <code>mod_def.ww3</code>.</li> <li>Run <code>ww3_strt</code> to generate <code>restart.ww3</code>.</li> <li>Update configuration (<code>config.yaml</code>, input path) to point to these files.</li> <li>Ensure generated files are consistent with the compiled executable.</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#when-to-re-generate-ww3-binary-files","title":"When to Re-Generate WW3 Binary Files","text":"<p>You must regenerate WW3 binary files when:</p> <ul> <li>Grid Changes: Any changes in resolution, extent, or source files.</li> <li>Spectral Discretization Changes: E.g., frequency bands, directional increments.</li> <li>Source/Physics Changes: Changing source schemes or enabling new physics modules.</li> <li>New Namelist Sections in <code>WW3_PreProc/namelists_Global.nml</code> : Adding new <code>&amp;...</code> blocks or features.</li> <li>Recompilation: Any rebuild of WW3 warrants regenerating input binaries.</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#guidance-for-users-and-best-practices","title":"Guidance for Users and Best Practices","text":"<ul> <li>Plan Changes Carefully: Know what will require rebuilds or input regeneration.</li> <li>Maintain Input-Executable Consistency: Always regenerate inputs with the correct WW3 build.</li> <li>Verify Logs and Output: Check <code>log.ww3</code>, <code>test.ww3</code> for namelist effectiveness.</li> </ul>"},{"location":"inputs/WW3_setup_and_workflow/#summary","title":"Summary","text":"<p>WW3 integration enhances ACCESS-OM3's realism by adding surface wave dynamics but introduces complexity through its dependence on binary preprocessing, compile-time configuration, and manual input generation. Until full automation is available, users must follow clear steps to ensure correctness and reproducibility.</p>"}]}